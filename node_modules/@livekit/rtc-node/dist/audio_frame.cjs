"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var audio_frame_exports = {};
__export(audio_frame_exports, {
  AudioFrame: () => AudioFrame,
  combineAudioFrames: () => combineAudioFrames
});
module.exports = __toCommonJS(audio_frame_exports);
var import_ffi_client = require("./ffi_client.cjs");
var import_audio_frame_pb = require("./proto/audio_frame_pb.cjs");
class AudioFrame {
  // note: if converting from Uint8Array to Int16Array, *do not* use buffer.slice!
  // it is marked unstable by Node and can cause undefined behaviour, such as massive chunks of
  // noise being added to the end.
  // it is recommended to use buffer.subarray instead.
  // XXX(nbsp): add this when writing proper docs
  constructor(data, sampleRate, channels, samplesPerChannel) {
    this.data = data;
    this.sampleRate = sampleRate;
    this.channels = channels;
    this.samplesPerChannel = samplesPerChannel;
  }
  static create(sampleRate, channels, samplesPerChannel) {
    const data = new Int16Array(channels * samplesPerChannel);
    return new AudioFrame(data, sampleRate, channels, samplesPerChannel);
  }
  /** @internal */
  static fromOwnedInfo(owned) {
    const info = owned.info;
    const len = info.numChannels * info.samplesPerChannel * 2;
    const data = import_ffi_client.FfiClient.instance.copyBuffer(info.dataPtr, len);
    new import_ffi_client.FfiHandle(owned.handle.id).dispose();
    return new AudioFrame(
      new Int16Array(data.buffer),
      info.sampleRate,
      info.numChannels,
      info.samplesPerChannel
    );
  }
  /** @internal */
  protoInfo() {
    return new import_audio_frame_pb.AudioFrameBufferInfo({
      dataPtr: import_ffi_client.FfiClient.instance.retrievePtr(new Uint8Array(this.data.buffer)),
      sampleRate: this.sampleRate,
      numChannels: this.channels,
      samplesPerChannel: this.samplesPerChannel
    });
  }
}
const combineAudioFrames = (buffer) => {
  if (!Array.isArray(buffer)) {
    return buffer;
  }
  buffer = buffer;
  if (buffer.length === 0) {
    throw new Error("buffer is empty");
  }
  const sampleRate = buffer[0].sampleRate;
  const channels = buffer[0].channels;
  let totalSamplesPerChannel = 0;
  for (const frame of buffer) {
    if (frame.sampleRate != sampleRate) {
      throw new Error(`sample rate mismatch: expected ${sampleRate}, got ${frame.sampleRate}`);
    }
    if (frame.channels != channels) {
      throw new Error(`channel mismatch: expected ${channels}, got ${frame.channels}`);
    }
    totalSamplesPerChannel += frame.samplesPerChannel;
  }
  const data = new Int16Array(buffer.map((x) => [...x.data]).flat());
  return new AudioFrame(data, sampleRate, channels, totalSamplesPerChannel);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AudioFrame,
  combineAudioFrames
});
//# sourceMappingURL=audio_frame.cjs.map