import { Mutex } from '@livekit/mutex';
import { AudioFrame } from './audio_frame.cjs';
import { FfiHandle } from './napi/native.d.cjs';
import { AudioStreamInfo } from './proto/audio_frame_pb.cjs';
import { Track } from './track.cjs';
import '@bufbuild/protobuf';
import './proto/track_pb.cjs';
import './proto/stats_pb.cjs';
import './proto/e2ee_pb.cjs';
import './proto/handle_pb.cjs';
import './audio_source.cjs';
import './video_source.cjs';
import './proto/video_frame_pb.cjs';
import './video_frame.cjs';

declare class AudioStream implements AsyncIterableIterator<AudioFrame> {
    /** @internal */
    info: AudioStreamInfo;
    /** @internal */
    ffiHandle: FfiHandle;
    /** @internal */
    eventQueue: (AudioFrame | null)[];
    /** @internal */
    queueResolve: ((value: IteratorResult<AudioFrame>) => void) | null;
    /** @internal */
    mutex: Mutex;
    track: Track;
    sampleRate: number;
    numChannels: number;
    constructor(track: Track, sampleRate?: number, numChannels?: number);
    private onEvent;
    next(): Promise<IteratorResult<AudioFrame>>;
    close(): void;
    [Symbol.asyncIterator](): AudioStream;
}

export { AudioStream };
