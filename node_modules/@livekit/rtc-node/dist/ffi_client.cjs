"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ffi_client_exports = {};
__export(ffi_client_exports, {
  FfiClient: () => FfiClient,
  FfiClientEvent: () => FfiClientEvent,
  FfiHandle: () => import_native.FfiHandle,
  FfiRequest: () => import_ffi_pb.FfiRequest,
  dispose: () => import_native.livekitDispose
});
module.exports = __toCommonJS(ffi_client_exports);
var import_events = __toESM(require("events"), 1);
var import_native = require("./napi/native.cjs");
var import_ffi_pb = require("./proto/ffi_pb.cjs");
var import_version = require("./version.cjs");
var FfiClientEvent = /* @__PURE__ */ ((FfiClientEvent2) => {
  FfiClientEvent2["FfiEvent"] = "ffi_event";
  return FfiClientEvent2;
})(FfiClientEvent || {});
class FfiClient extends import_events.default {
  /** @internal */
  static get instance() {
    if (!FfiClient._client) FfiClient._client = new FfiClient();
    return FfiClient._client;
  }
  constructor() {
    super();
    this.setMaxListeners(0);
    (0, import_native.livekitInitialize)(
      (event_data) => {
        const event = import_ffi_pb.FfiEvent.fromBinary(event_data);
        this.emit("ffi_event" /* FfiEvent */, event);
      },
      true,
      import_version.SDK_VERSION
    );
  }
  request(req) {
    const request = new import_ffi_pb.FfiRequest(req);
    const req_data = request.toBinary();
    const res_data = (0, import_native.livekitFfiRequest)(req_data);
    return import_ffi_pb.FfiResponse.fromBinary(res_data).message.value;
  }
  copyBuffer(ptr, len) {
    return (0, import_native.livekitCopyBuffer)(ptr, len);
  }
  retrievePtr(data) {
    return (0, import_native.livekitRetrievePtr)(data);
  }
  async waitFor(predicate) {
    return new Promise((resolve) => {
      const listener = (ev) => {
        if (predicate(ev)) {
          this.off("ffi_event" /* FfiEvent */, listener);
          resolve(ev.message.value);
        }
      };
      this.on("ffi_event" /* FfiEvent */, listener);
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FfiClient,
  FfiClientEvent,
  FfiHandle,
  FfiRequest,
  dispose
});
//# sourceMappingURL=ffi_client.cjs.map