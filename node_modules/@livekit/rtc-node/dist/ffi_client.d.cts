import { PartialMessage } from '@bufbuild/protobuf';
import { TypedEventEmitter } from '@livekit/typed-emitter';
export { FfiHandle, livekitDispose as dispose } from './napi/native.d.cjs';
import { FfiEvent, FfiRequest } from './proto/ffi_pb.cjs';
export { FfiResponse } from './proto/ffi_pb.cjs';
import './proto/room_pb.cjs';
import './proto/participant_pb.cjs';
import './proto/handle_pb.cjs';
import './proto/track_pb.cjs';
import './proto/stats_pb.cjs';
import './proto/e2ee_pb.cjs';
import './proto/video_frame_pb.cjs';
import './proto/audio_frame_pb.cjs';
import './proto/rpc_pb.cjs';
import './proto/track_publication_pb.cjs';

type FfiClientCallbacks = {
    ffi_event: (event: FfiEvent) => void;
};
declare enum FfiClientEvent {
    FfiEvent = "ffi_event"
}
declare const FfiClient_base: new () => TypedEventEmitter<FfiClientCallbacks>;
declare class FfiClient extends FfiClient_base {
    static _client?: FfiClient;
    /** @internal */
    static get instance(): FfiClient;
    constructor();
    request<T>(req: PartialMessage<FfiRequest>): T;
    copyBuffer(ptr: bigint, len: number): Uint8Array;
    retrievePtr(data: Uint8Array): bigint;
    waitFor<T>(predicate: (ev: FfiEvent) => boolean): Promise<T>;
}

export { FfiClient, type FfiClientCallbacks, FfiClientEvent, FfiEvent, FfiRequest };
