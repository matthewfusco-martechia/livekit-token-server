{"version":3,"sources":["../src/audio_frame.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { FfiClient, FfiHandle } from './ffi_client.js';\nimport type { OwnedAudioFrameBuffer } from './proto/audio_frame_pb.js';\nimport { AudioFrameBufferInfo } from './proto/audio_frame_pb.js';\n\nexport class AudioFrame {\n  data: Int16Array;\n  sampleRate: number;\n  channels: number;\n  samplesPerChannel: number;\n\n  // note: if converting from Uint8Array to Int16Array, *do not* use buffer.slice!\n  // it is marked unstable by Node and can cause undefined behaviour, such as massive chunks of\n  // noise being added to the end.\n  // it is recommended to use buffer.subarray instead.\n  // XXX(nbsp): add this when writing proper docs\n  constructor(data: Int16Array, sampleRate: number, channels: number, samplesPerChannel: number) {\n    this.data = data;\n    this.sampleRate = sampleRate;\n    this.channels = channels;\n    this.samplesPerChannel = samplesPerChannel;\n  }\n\n  static create(sampleRate: number, channels: number, samplesPerChannel: number): AudioFrame {\n    const data = new Int16Array(channels * samplesPerChannel);\n    return new AudioFrame(data, sampleRate, channels, samplesPerChannel);\n  }\n\n  /** @internal */\n  static fromOwnedInfo(owned: OwnedAudioFrameBuffer): AudioFrame {\n    const info = owned.info!;\n    const len = info.numChannels! * info.samplesPerChannel! * 2; // c_int16\n    const data = FfiClient.instance.copyBuffer(info.dataPtr!, len);\n    new FfiHandle(owned.handle!.id!).dispose();\n    return new AudioFrame(\n      new Int16Array(data.buffer),\n      info.sampleRate!,\n      info.numChannels!,\n      info.samplesPerChannel!,\n    );\n  }\n\n  /** @internal */\n  protoInfo(): AudioFrameBufferInfo {\n    return new AudioFrameBufferInfo({\n      dataPtr: FfiClient.instance.retrievePtr(new Uint8Array(this.data.buffer)),\n      sampleRate: this.sampleRate,\n      numChannels: this.channels,\n      samplesPerChannel: this.samplesPerChannel,\n    });\n  }\n}\n\n/**\n * Combines one or more `rtc.AudioFrame` objects into a single `rtc.AudioFrame`.\n *\n * This function concatenates the audio data from multiple frames, ensuring that all frames have\n * the same sample rate and number of channels. It efficiently merges the data by preallocating the\n * necessary memory and copying the frame data without unnecessary reallocations.\n *\n * @param buffer - a single AudioFrame or list thereof\n */\nexport const combineAudioFrames = (buffer: AudioFrame | AudioFrame[]): AudioFrame => {\n  if (!Array.isArray(buffer)) {\n    return buffer;\n  }\n  buffer = buffer as AudioFrame[];\n\n  if (buffer.length === 0) {\n    throw new Error('buffer is empty');\n  }\n\n  const sampleRate = buffer[0]!.sampleRate;\n  const channels = buffer[0]!.channels;\n\n  let totalSamplesPerChannel = 0;\n  for (const frame of buffer) {\n    if (frame.sampleRate != sampleRate) {\n      throw new Error(`sample rate mismatch: expected ${sampleRate}, got ${frame.sampleRate}`);\n    }\n\n    if (frame.channels != channels) {\n      throw new Error(`channel mismatch: expected ${channels}, got ${frame.channels}`);\n    }\n\n    totalSamplesPerChannel += frame.samplesPerChannel;\n  }\n\n  const data = new Int16Array(buffer.map((x) => [...x.data]).flat());\n  return new AudioFrame(data, sampleRate, channels, totalSamplesPerChannel);\n};\n"],"mappings":"AAGA,SAAS,WAAW,iBAAiB;AAErC,SAAS,4BAA4B;AAE9B,MAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWtB,YAAY,MAAkB,YAAoB,UAAkB,mBAA2B;AAC7F,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,OAAO,OAAO,YAAoB,UAAkB,mBAAuC;AACzF,UAAM,OAAO,IAAI,WAAW,WAAW,iBAAiB;AACxD,WAAO,IAAI,WAAW,MAAM,YAAY,UAAU,iBAAiB;AAAA,EACrE;AAAA;AAAA,EAGA,OAAO,cAAc,OAA0C;AAC7D,UAAM,OAAO,MAAM;AACnB,UAAM,MAAM,KAAK,cAAe,KAAK,oBAAqB;AAC1D,UAAM,OAAO,UAAU,SAAS,WAAW,KAAK,SAAU,GAAG;AAC7D,QAAI,UAAU,MAAM,OAAQ,EAAG,EAAE,QAAQ;AACzC,WAAO,IAAI;AAAA,MACT,IAAI,WAAW,KAAK,MAAM;AAAA,MAC1B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACP;AAAA,EACF;AAAA;AAAA,EAGA,YAAkC;AAChC,WAAO,IAAI,qBAAqB;AAAA,MAC9B,SAAS,UAAU,SAAS,YAAY,IAAI,WAAW,KAAK,KAAK,MAAM,CAAC;AAAA,MACxE,YAAY,KAAK;AAAA,MACjB,aAAa,KAAK;AAAA,MAClB,mBAAmB,KAAK;AAAA,IAC1B,CAAC;AAAA,EACH;AACF;AAWO,MAAM,qBAAqB,CAAC,WAAkD;AACnF,MAAI,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC1B,WAAO;AAAA,EACT;AACA,WAAS;AAET,MAAI,OAAO,WAAW,GAAG;AACvB,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAEA,QAAM,aAAa,OAAO,CAAC,EAAG;AAC9B,QAAM,WAAW,OAAO,CAAC,EAAG;AAE5B,MAAI,yBAAyB;AAC7B,aAAW,SAAS,QAAQ;AAC1B,QAAI,MAAM,cAAc,YAAY;AAClC,YAAM,IAAI,MAAM,kCAAkC,UAAU,SAAS,MAAM,UAAU,EAAE;AAAA,IACzF;AAEA,QAAI,MAAM,YAAY,UAAU;AAC9B,YAAM,IAAI,MAAM,8BAA8B,QAAQ,SAAS,MAAM,QAAQ,EAAE;AAAA,IACjF;AAEA,8BAA0B,MAAM;AAAA,EAClC;AAEA,QAAM,OAAO,IAAI,WAAW,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC;AACjE,SAAO,IAAI,WAAW,MAAM,YAAY,UAAU,sBAAsB;AAC1E;","names":[]}