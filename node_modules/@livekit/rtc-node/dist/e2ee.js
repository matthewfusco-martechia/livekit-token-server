import { FfiClient } from "./ffi_client.js";
import {
  E2eeManagerSetEnabledRequest,
  E2eeRequest,
  EncryptionType,
  FrameCryptorSetEnabledRequest,
  FrameCryptorSetKeyIndexRequest,
  GetKeyRequest,
  GetSharedKeyRequest,
  RatchetKeyRequest,
  RatchetSharedKeyRequest,
  SetKeyRequest,
  SetSharedKeyRequest
} from "./proto/e2ee_pb.js";
const DEFAULT_RATCHET_SALT = new TextEncoder().encode("LKFrameEncryptionKey");
const DEFAULT_RATCHET_WINDOW_SIZE = 16;
const DEFAULT_FAILURE_TOLERANCE = -1;
const defaultKeyProviderOptions = {
  ratchetSalt: DEFAULT_RATCHET_SALT,
  ratchetWindowSize: DEFAULT_RATCHET_WINDOW_SIZE,
  failureTolerance: DEFAULT_FAILURE_TOLERANCE
};
const defaultE2EEOptions = {
  keyProviderOptions: defaultKeyProviderOptions,
  encryptionType: EncryptionType.GCM
};
class KeyProvider {
  /** internal */
  constructor(roomHandle, opts) {
    this.roomHandle = roomHandle;
    this.options = opts;
  }
  setSharedKey(sharedKey, keyIndex) {
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "setSharedKey",
        value: new SetSharedKeyRequest({
          keyIndex,
          sharedKey
        })
      }
    });
    FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  exportSharedKey(keyIndex) {
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "getSharedKey",
        value: new GetSharedKeyRequest({
          keyIndex
        })
      }
    });
    const res = FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.key;
  }
  ratchetSharedKey(keyIndex) {
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "ratchetSharedKey",
        value: new RatchetSharedKeyRequest({
          keyIndex
        })
      }
    });
    const res = FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.newKey;
  }
  setKey(participantIdentity, keyIndex) {
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "setKey",
        value: new SetKeyRequest({
          keyIndex,
          participantIdentity
        })
      }
    });
    FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  exportKey(participantIdentity, keyIndex) {
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "getKey",
        value: new GetKeyRequest({
          keyIndex,
          participantIdentity
        })
      }
    });
    const res = FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.key;
  }
  ratchetKey(participantIdentity, keyIndex) {
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "ratchetKey",
        value: new RatchetKeyRequest({
          keyIndex,
          participantIdentity
        })
      }
    });
    const res = FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.newKey;
  }
}
class FrameCryptor {
  constructor(roomHandle, participantIdentity, keyIndex, enabled) {
    this.roomHandle = BigInt(0);
    this.roomHandle = roomHandle;
    this.participantIdentity = participantIdentity;
    this.keyIndex = keyIndex;
    this.enabled = enabled;
  }
  setEnabled(enabled) {
    this.enabled = enabled;
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "cryptorSetEnabled",
        value: new FrameCryptorSetEnabledRequest({
          participantIdentity: this.participantIdentity,
          enabled: this.enabled
        })
      }
    });
    FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  setKeyIndex(keyIndex) {
    this.keyIndex = keyIndex;
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "cryptorSetKeyIndex",
        value: new FrameCryptorSetKeyIndexRequest({
          participantIdentity: this.participantIdentity,
          keyIndex: this.keyIndex
        })
      }
    });
    FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
}
class E2EEManager {
  constructor(roomHandle, opts) {
    this.roomHandle = BigInt(0);
    this.roomHandle = roomHandle;
    this.enabled = opts !== void 0;
    opts ??= defaultE2EEOptions;
    const options = { ...defaultE2EEOptions, ...opts };
    this.options = options;
    this.keyProvider = new KeyProvider(roomHandle, options.keyProviderOptions);
  }
  setEnabled(enabled) {
    this.enabled = enabled;
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "managerSetEnabled",
        value: new E2eeManagerSetEnabledRequest({
          enabled: this.enabled
        })
      }
    });
    FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  frameCryptors() {
    const req = new E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "managerGetFrameCryptors",
        value: {}
      }
    });
    const res = FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    const frameCryptors = res.message.value.frameCryptors.map(
      (cryptor) => new FrameCryptor(
        this.roomHandle,
        cryptor.participantIdentity,
        cryptor.keyIndex,
        cryptor.enabled
      )
    );
    return frameCryptors;
  }
}
export {
  E2EEManager,
  FrameCryptor,
  KeyProvider,
  defaultE2EEOptions,
  defaultKeyProviderOptions
};
//# sourceMappingURL=e2ee.js.map