"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var e2ee_exports = {};
__export(e2ee_exports, {
  E2EEManager: () => E2EEManager,
  FrameCryptor: () => FrameCryptor,
  KeyProvider: () => KeyProvider,
  defaultE2EEOptions: () => defaultE2EEOptions,
  defaultKeyProviderOptions: () => defaultKeyProviderOptions
});
module.exports = __toCommonJS(e2ee_exports);
var import_ffi_client = require("./ffi_client.cjs");
var import_e2ee_pb = require("./proto/e2ee_pb.cjs");
const DEFAULT_RATCHET_SALT = new TextEncoder().encode("LKFrameEncryptionKey");
const DEFAULT_RATCHET_WINDOW_SIZE = 16;
const DEFAULT_FAILURE_TOLERANCE = -1;
const defaultKeyProviderOptions = {
  ratchetSalt: DEFAULT_RATCHET_SALT,
  ratchetWindowSize: DEFAULT_RATCHET_WINDOW_SIZE,
  failureTolerance: DEFAULT_FAILURE_TOLERANCE
};
const defaultE2EEOptions = {
  keyProviderOptions: defaultKeyProviderOptions,
  encryptionType: import_e2ee_pb.EncryptionType.GCM
};
class KeyProvider {
  /** internal */
  constructor(roomHandle, opts) {
    this.roomHandle = roomHandle;
    this.options = opts;
  }
  setSharedKey(sharedKey, keyIndex) {
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "setSharedKey",
        value: new import_e2ee_pb.SetSharedKeyRequest({
          keyIndex,
          sharedKey
        })
      }
    });
    import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  exportSharedKey(keyIndex) {
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "getSharedKey",
        value: new import_e2ee_pb.GetSharedKeyRequest({
          keyIndex
        })
      }
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.key;
  }
  ratchetSharedKey(keyIndex) {
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "ratchetSharedKey",
        value: new import_e2ee_pb.RatchetSharedKeyRequest({
          keyIndex
        })
      }
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.newKey;
  }
  setKey(participantIdentity, keyIndex) {
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "setKey",
        value: new import_e2ee_pb.SetKeyRequest({
          keyIndex,
          participantIdentity
        })
      }
    });
    import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  exportKey(participantIdentity, keyIndex) {
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "getKey",
        value: new import_e2ee_pb.GetKeyRequest({
          keyIndex,
          participantIdentity
        })
      }
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.key;
  }
  ratchetKey(participantIdentity, keyIndex) {
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "ratchetKey",
        value: new import_e2ee_pb.RatchetKeyRequest({
          keyIndex,
          participantIdentity
        })
      }
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    return res.message.value.newKey;
  }
}
class FrameCryptor {
  constructor(roomHandle, participantIdentity, keyIndex, enabled) {
    this.roomHandle = BigInt(0);
    this.roomHandle = roomHandle;
    this.participantIdentity = participantIdentity;
    this.keyIndex = keyIndex;
    this.enabled = enabled;
  }
  setEnabled(enabled) {
    this.enabled = enabled;
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "cryptorSetEnabled",
        value: new import_e2ee_pb.FrameCryptorSetEnabledRequest({
          participantIdentity: this.participantIdentity,
          enabled: this.enabled
        })
      }
    });
    import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  setKeyIndex(keyIndex) {
    this.keyIndex = keyIndex;
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "cryptorSetKeyIndex",
        value: new import_e2ee_pb.FrameCryptorSetKeyIndexRequest({
          participantIdentity: this.participantIdentity,
          keyIndex: this.keyIndex
        })
      }
    });
    import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
}
class E2EEManager {
  constructor(roomHandle, opts) {
    this.roomHandle = BigInt(0);
    this.roomHandle = roomHandle;
    this.enabled = opts !== void 0;
    opts ??= defaultE2EEOptions;
    const options = { ...defaultE2EEOptions, ...opts };
    this.options = options;
    this.keyProvider = new KeyProvider(roomHandle, options.keyProviderOptions);
  }
  setEnabled(enabled) {
    this.enabled = enabled;
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "managerSetEnabled",
        value: new import_e2ee_pb.E2eeManagerSetEnabledRequest({
          enabled: this.enabled
        })
      }
    });
    import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
  }
  frameCryptors() {
    const req = new import_e2ee_pb.E2eeRequest({
      roomHandle: this.roomHandle,
      message: {
        case: "managerGetFrameCryptors",
        value: {}
      }
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: {
        case: "e2ee",
        value: req
      }
    });
    const frameCryptors = res.message.value.frameCryptors.map(
      (cryptor) => new FrameCryptor(
        this.roomHandle,
        cryptor.participantIdentity,
        cryptor.keyIndex,
        cryptor.enabled
      )
    );
    return frameCryptors;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  E2EEManager,
  FrameCryptor,
  KeyProvider,
  defaultE2EEOptions,
  defaultKeyProviderOptions
});
//# sourceMappingURL=e2ee.cjs.map