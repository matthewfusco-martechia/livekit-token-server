import { Mutex } from '@livekit/mutex';
import { FfiHandle } from './napi/native.d.cjs';
import { VideoRotation, VideoStreamInfo } from './proto/video_frame_pb.cjs';
import { Track } from './track.cjs';
import { VideoFrame } from './video_frame.cjs';
import '@bufbuild/protobuf';
import './proto/track_pb.cjs';
import './proto/stats_pb.cjs';
import './proto/e2ee_pb.cjs';
import './proto/handle_pb.cjs';
import './audio_source.cjs';
import './audio_frame.cjs';
import './proto/audio_frame_pb.cjs';
import './video_source.cjs';

type VideoFrameEvent = {
    frame: VideoFrame;
    timestampUs: bigint;
    rotation: VideoRotation;
};
declare class VideoStream implements AsyncIterableIterator<VideoFrameEvent> {
    /** @internal */
    info?: VideoStreamInfo;
    /** @internal */
    ffiHandle: FfiHandle;
    /** @internal */
    eventQueue: (VideoFrameEvent | null)[];
    /** @internal */
    queueResolve: ((value: IteratorResult<VideoFrameEvent>) => void) | null;
    /** @internal */
    mutex: Mutex;
    track: Track;
    constructor(track: Track);
    private onEvent;
    next(): Promise<IteratorResult<VideoFrameEvent>>;
    close(): void;
    [Symbol.asyncIterator](): VideoStream;
}

export { type VideoFrameEvent, VideoStream };
