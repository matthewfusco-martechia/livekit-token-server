"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var video_source_exports = {};
__export(video_source_exports, {
  VideoSource: () => VideoSource
});
module.exports = __toCommonJS(video_source_exports);
var import_ffi_client = require("./ffi_client.cjs");
var import_video_frame_pb = require("./proto/video_frame_pb.cjs");
class VideoSource {
  constructor(width, height) {
    var _a;
    this.width = width;
    this.height = height;
    const req = new import_video_frame_pb.NewVideoSourceRequest({
      type: import_video_frame_pb.VideoSourceType.VIDEO_SOURCE_NATIVE,
      resolution: {
        width,
        height
      }
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: {
        case: "newVideoSource",
        value: req
      }
    });
    this.info = (_a = res.source) == null ? void 0 : _a.info;
    this.ffiHandle = new import_ffi_client.FfiHandle(res.source.handle.id);
  }
  captureFrame(frame, timestampUs = BigInt(0), rotation = import_video_frame_pb.VideoRotation.VIDEO_ROTATION_0) {
    const req = new import_video_frame_pb.CaptureVideoFrameRequest({
      sourceHandle: this.ffiHandle.handle,
      buffer: frame.protoInfo(),
      rotation,
      timestampUs
    });
    import_ffi_client.FfiClient.instance.request({
      message: { case: "captureVideoFrame", value: req }
    });
  }
  async close() {
    this.ffiHandle.dispose();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VideoSource
});
//# sourceMappingURL=video_source.cjs.map