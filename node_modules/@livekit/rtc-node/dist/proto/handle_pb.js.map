{"version":3,"sources":["../../src/proto/handle_pb.ts"],"sourcesContent":["// Copyright 2023 LiveKit, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.10.0 with parameter \"target=ts,import_extension=.js\"\n// @generated from file handle.proto (package livekit.proto, syntax proto2)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto2 } from \"@bufbuild/protobuf\";\n\n/**\n * # Safety\n * The foreign language is responsable for disposing handles\n * Forgetting to dispose the handle may lead to memory leaks\n *\n * Dropping a handle doesn't necessarily mean that the object is destroyed if it is still used\n * on the FfiServer (Atomic reference counting)\n *\n * When refering to a handle without owning it, we just use a uint32 without this message. \n * (the variable name is suffixed with \"_handle\")\n *\n * @generated from message livekit.proto.FfiOwnedHandle\n */\nexport class FfiOwnedHandle extends Message<FfiOwnedHandle> {\n  /**\n   * @generated from field: required uint64 id = 1;\n   */\n  id?: bigint;\n\n  constructor(data?: PartialMessage<FfiOwnedHandle>) {\n    super();\n    proto2.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto2 = proto2;\n  static readonly typeName = \"livekit.proto.FfiOwnedHandle\";\n  static readonly fields: FieldList = proto2.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, req: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FfiOwnedHandle {\n    return new FfiOwnedHandle().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FfiOwnedHandle {\n    return new FfiOwnedHandle().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FfiOwnedHandle {\n    return new FfiOwnedHandle().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: FfiOwnedHandle | PlainMessage<FfiOwnedHandle> | undefined, b: FfiOwnedHandle | PlainMessage<FfiOwnedHandle> | undefined): boolean {\n    return proto2.util.equals(FfiOwnedHandle, a, b);\n  }\n}\n\n"],"mappings":"AAoBA,SAAS,SAAS,cAAc;AAezB,MAAM,kBAAN,MAAM,wBAAuB,QAAwB;AAAA,EAM1D,YAAY,MAAuC;AACjD,UAAM;AACN,WAAO,KAAK,YAAY,MAAM,IAAI;AAAA,EACpC;AAAA,EAQA,OAAO,WAAW,OAAmB,SAAsD;AACzF,WAAO,IAAI,gBAAe,EAAE,WAAW,OAAO,OAAO;AAAA,EACvD;AAAA,EAEA,OAAO,SAAS,WAAsB,SAAoD;AACxF,WAAO,IAAI,gBAAe,EAAE,SAAS,WAAW,OAAO;AAAA,EACzD;AAAA,EAEA,OAAO,eAAe,YAAoB,SAAoD;AAC5F,WAAO,IAAI,gBAAe,EAAE,eAAe,YAAY,OAAO;AAAA,EAChE;AAAA,EAEA,OAAO,OAAO,GAA8D,GAAuE;AACjJ,WAAO,OAAO,KAAK,OAAO,iBAAgB,GAAG,CAAC;AAAA,EAChD;AACF;AAhCa,gBAWK,UAAyB;AAX9B,gBAYK,WAAW;AAZhB,gBAaK,SAAoB,OAAO,KAAK,aAAa,MAAM;AAAA,EACjE,EAAE,IAAI,GAAG,MAAM,MAAM,MAAM,UAAU,GAAG,GAA2B,KAAK,KAAK;AAC/E,CAAC;AAfI,IAAM,iBAAN;","names":[]}