"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var audio_frame_pb_exports = {};
__export(audio_frame_pb_exports, {
  AudioFrameBufferInfo: () => AudioFrameBufferInfo,
  AudioFrameReceived: () => AudioFrameReceived,
  AudioResamplerInfo: () => AudioResamplerInfo,
  AudioSourceInfo: () => AudioSourceInfo,
  AudioSourceOptions: () => AudioSourceOptions,
  AudioSourceType: () => AudioSourceType,
  AudioStreamEOS: () => AudioStreamEOS,
  AudioStreamEvent: () => AudioStreamEvent,
  AudioStreamFromParticipantRequest: () => AudioStreamFromParticipantRequest,
  AudioStreamFromParticipantResponse: () => AudioStreamFromParticipantResponse,
  AudioStreamInfo: () => AudioStreamInfo,
  AudioStreamType: () => AudioStreamType,
  CaptureAudioFrameCallback: () => CaptureAudioFrameCallback,
  CaptureAudioFrameRequest: () => CaptureAudioFrameRequest,
  CaptureAudioFrameResponse: () => CaptureAudioFrameResponse,
  ClearAudioBufferRequest: () => ClearAudioBufferRequest,
  ClearAudioBufferResponse: () => ClearAudioBufferResponse,
  FlushSoxResamplerRequest: () => FlushSoxResamplerRequest,
  FlushSoxResamplerResponse: () => FlushSoxResamplerResponse,
  NewAudioResamplerRequest: () => NewAudioResamplerRequest,
  NewAudioResamplerResponse: () => NewAudioResamplerResponse,
  NewAudioSourceRequest: () => NewAudioSourceRequest,
  NewAudioSourceResponse: () => NewAudioSourceResponse,
  NewAudioStreamRequest: () => NewAudioStreamRequest,
  NewAudioStreamResponse: () => NewAudioStreamResponse,
  NewSoxResamplerRequest: () => NewSoxResamplerRequest,
  NewSoxResamplerResponse: () => NewSoxResamplerResponse,
  OwnedAudioFrameBuffer: () => OwnedAudioFrameBuffer,
  OwnedAudioResampler: () => OwnedAudioResampler,
  OwnedAudioSource: () => OwnedAudioSource,
  OwnedAudioStream: () => OwnedAudioStream,
  OwnedSoxResampler: () => OwnedSoxResampler,
  PushSoxResamplerRequest: () => PushSoxResamplerRequest,
  PushSoxResamplerResponse: () => PushSoxResamplerResponse,
  RemixAndResampleRequest: () => RemixAndResampleRequest,
  RemixAndResampleResponse: () => RemixAndResampleResponse,
  SoxFlagBits: () => SoxFlagBits,
  SoxQualityRecipe: () => SoxQualityRecipe,
  SoxResamplerDataType: () => SoxResamplerDataType,
  SoxResamplerInfo: () => SoxResamplerInfo
});
module.exports = __toCommonJS(audio_frame_pb_exports);
var import_protobuf = require("@bufbuild/protobuf");
var import_track_pb = require("./track_pb.cjs");
var import_handle_pb = require("./handle_pb.cjs");
var SoxResamplerDataType = /* @__PURE__ */ ((SoxResamplerDataType2) => {
  SoxResamplerDataType2[SoxResamplerDataType2["SOXR_DATATYPE_INT16I"] = 0] = "SOXR_DATATYPE_INT16I";
  SoxResamplerDataType2[SoxResamplerDataType2["SOXR_DATATYPE_INT16S"] = 1] = "SOXR_DATATYPE_INT16S";
  return SoxResamplerDataType2;
})(SoxResamplerDataType || {});
import_protobuf.proto2.util.setEnumType(SoxResamplerDataType, "livekit.proto.SoxResamplerDataType", [
  { no: 0, name: "SOXR_DATATYPE_INT16I" },
  { no: 1, name: "SOXR_DATATYPE_INT16S" }
]);
var SoxQualityRecipe = /* @__PURE__ */ ((SoxQualityRecipe2) => {
  SoxQualityRecipe2[SoxQualityRecipe2["SOXR_QUALITY_QUICK"] = 0] = "SOXR_QUALITY_QUICK";
  SoxQualityRecipe2[SoxQualityRecipe2["SOXR_QUALITY_LOW"] = 1] = "SOXR_QUALITY_LOW";
  SoxQualityRecipe2[SoxQualityRecipe2["SOXR_QUALITY_MEDIUM"] = 2] = "SOXR_QUALITY_MEDIUM";
  SoxQualityRecipe2[SoxQualityRecipe2["SOXR_QUALITY_HIGH"] = 3] = "SOXR_QUALITY_HIGH";
  SoxQualityRecipe2[SoxQualityRecipe2["SOXR_QUALITY_VERYHIGH"] = 4] = "SOXR_QUALITY_VERYHIGH";
  return SoxQualityRecipe2;
})(SoxQualityRecipe || {});
import_protobuf.proto2.util.setEnumType(SoxQualityRecipe, "livekit.proto.SoxQualityRecipe", [
  { no: 0, name: "SOXR_QUALITY_QUICK" },
  { no: 1, name: "SOXR_QUALITY_LOW" },
  { no: 2, name: "SOXR_QUALITY_MEDIUM" },
  { no: 3, name: "SOXR_QUALITY_HIGH" },
  { no: 4, name: "SOXR_QUALITY_VERYHIGH" }
]);
var SoxFlagBits = /* @__PURE__ */ ((SoxFlagBits2) => {
  SoxFlagBits2[SoxFlagBits2["SOXR_ROLLOFF_SMALL"] = 0] = "SOXR_ROLLOFF_SMALL";
  SoxFlagBits2[SoxFlagBits2["SOXR_ROLLOFF_MEDIUM"] = 1] = "SOXR_ROLLOFF_MEDIUM";
  SoxFlagBits2[SoxFlagBits2["SOXR_ROLLOFF_NONE"] = 2] = "SOXR_ROLLOFF_NONE";
  SoxFlagBits2[SoxFlagBits2["SOXR_HIGH_PREC_CLOCK"] = 3] = "SOXR_HIGH_PREC_CLOCK";
  SoxFlagBits2[SoxFlagBits2["SOXR_DOUBLE_PRECISION"] = 4] = "SOXR_DOUBLE_PRECISION";
  SoxFlagBits2[SoxFlagBits2["SOXR_VR"] = 5] = "SOXR_VR";
  return SoxFlagBits2;
})(SoxFlagBits || {});
import_protobuf.proto2.util.setEnumType(SoxFlagBits, "livekit.proto.SoxFlagBits", [
  { no: 0, name: "SOXR_ROLLOFF_SMALL" },
  { no: 1, name: "SOXR_ROLLOFF_MEDIUM" },
  { no: 2, name: "SOXR_ROLLOFF_NONE" },
  { no: 3, name: "SOXR_HIGH_PREC_CLOCK" },
  { no: 4, name: "SOXR_DOUBLE_PRECISION" },
  { no: 5, name: "SOXR_VR" }
]);
var AudioStreamType = /* @__PURE__ */ ((AudioStreamType2) => {
  AudioStreamType2[AudioStreamType2["AUDIO_STREAM_NATIVE"] = 0] = "AUDIO_STREAM_NATIVE";
  AudioStreamType2[AudioStreamType2["AUDIO_STREAM_HTML"] = 1] = "AUDIO_STREAM_HTML";
  return AudioStreamType2;
})(AudioStreamType || {});
import_protobuf.proto2.util.setEnumType(AudioStreamType, "livekit.proto.AudioStreamType", [
  { no: 0, name: "AUDIO_STREAM_NATIVE" },
  { no: 1, name: "AUDIO_STREAM_HTML" }
]);
var AudioSourceType = /* @__PURE__ */ ((AudioSourceType2) => {
  AudioSourceType2[AudioSourceType2["AUDIO_SOURCE_NATIVE"] = 0] = "AUDIO_SOURCE_NATIVE";
  return AudioSourceType2;
})(AudioSourceType || {});
import_protobuf.proto2.util.setEnumType(AudioSourceType, "livekit.proto.AudioSourceType", [
  { no: 0, name: "AUDIO_SOURCE_NATIVE" }
]);
const _NewAudioStreamRequest = class _NewAudioStreamRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewAudioStreamRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewAudioStreamRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewAudioStreamRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewAudioStreamRequest, a, b);
  }
};
_NewAudioStreamRequest.runtime = import_protobuf.proto2;
_NewAudioStreamRequest.typeName = "livekit.proto.NewAudioStreamRequest";
_NewAudioStreamRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "track_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "type", kind: "enum", T: import_protobuf.proto2.getEnumType(AudioStreamType), req: true },
  { no: 3, name: "sample_rate", kind: "scalar", T: 13, opt: true },
  { no: 4, name: "num_channels", kind: "scalar", T: 13, opt: true }
]);
let NewAudioStreamRequest = _NewAudioStreamRequest;
const _NewAudioStreamResponse = class _NewAudioStreamResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewAudioStreamResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewAudioStreamResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewAudioStreamResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewAudioStreamResponse, a, b);
  }
};
_NewAudioStreamResponse.runtime = import_protobuf.proto2;
_NewAudioStreamResponse.typeName = "livekit.proto.NewAudioStreamResponse";
_NewAudioStreamResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "stream", kind: "message", T: OwnedAudioStream, req: true }
]);
let NewAudioStreamResponse = _NewAudioStreamResponse;
const _AudioStreamFromParticipantRequest = class _AudioStreamFromParticipantRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioStreamFromParticipantRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioStreamFromParticipantRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioStreamFromParticipantRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioStreamFromParticipantRequest, a, b);
  }
};
_AudioStreamFromParticipantRequest.runtime = import_protobuf.proto2;
_AudioStreamFromParticipantRequest.typeName = "livekit.proto.AudioStreamFromParticipantRequest";
_AudioStreamFromParticipantRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "type", kind: "enum", T: import_protobuf.proto2.getEnumType(AudioStreamType), req: true },
  { no: 3, name: "track_source", kind: "enum", T: import_protobuf.proto2.getEnumType(import_track_pb.TrackSource), opt: true },
  { no: 5, name: "sample_rate", kind: "scalar", T: 13, opt: true },
  { no: 6, name: "num_channels", kind: "scalar", T: 13, opt: true }
]);
let AudioStreamFromParticipantRequest = _AudioStreamFromParticipantRequest;
const _AudioStreamFromParticipantResponse = class _AudioStreamFromParticipantResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioStreamFromParticipantResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioStreamFromParticipantResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioStreamFromParticipantResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioStreamFromParticipantResponse, a, b);
  }
};
_AudioStreamFromParticipantResponse.runtime = import_protobuf.proto2;
_AudioStreamFromParticipantResponse.typeName = "livekit.proto.AudioStreamFromParticipantResponse";
_AudioStreamFromParticipantResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "stream", kind: "message", T: OwnedAudioStream, req: true }
]);
let AudioStreamFromParticipantResponse = _AudioStreamFromParticipantResponse;
const _NewAudioSourceRequest = class _NewAudioSourceRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewAudioSourceRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewAudioSourceRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewAudioSourceRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewAudioSourceRequest, a, b);
  }
};
_NewAudioSourceRequest.runtime = import_protobuf.proto2;
_NewAudioSourceRequest.typeName = "livekit.proto.NewAudioSourceRequest";
_NewAudioSourceRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "type", kind: "enum", T: import_protobuf.proto2.getEnumType(AudioSourceType), req: true },
  { no: 2, name: "options", kind: "message", T: AudioSourceOptions, opt: true },
  { no: 3, name: "sample_rate", kind: "scalar", T: 13, req: true },
  { no: 4, name: "num_channels", kind: "scalar", T: 13, req: true },
  { no: 5, name: "queue_size_ms", kind: "scalar", T: 13, opt: true }
]);
let NewAudioSourceRequest = _NewAudioSourceRequest;
const _NewAudioSourceResponse = class _NewAudioSourceResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewAudioSourceResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewAudioSourceResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewAudioSourceResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewAudioSourceResponse, a, b);
  }
};
_NewAudioSourceResponse.runtime = import_protobuf.proto2;
_NewAudioSourceResponse.typeName = "livekit.proto.NewAudioSourceResponse";
_NewAudioSourceResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "source", kind: "message", T: OwnedAudioSource, req: true }
]);
let NewAudioSourceResponse = _NewAudioSourceResponse;
const _CaptureAudioFrameRequest = class _CaptureAudioFrameRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _CaptureAudioFrameRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _CaptureAudioFrameRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _CaptureAudioFrameRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_CaptureAudioFrameRequest, a, b);
  }
};
_CaptureAudioFrameRequest.runtime = import_protobuf.proto2;
_CaptureAudioFrameRequest.typeName = "livekit.proto.CaptureAudioFrameRequest";
_CaptureAudioFrameRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "source_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "buffer", kind: "message", T: AudioFrameBufferInfo, req: true }
]);
let CaptureAudioFrameRequest = _CaptureAudioFrameRequest;
const _CaptureAudioFrameResponse = class _CaptureAudioFrameResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _CaptureAudioFrameResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _CaptureAudioFrameResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _CaptureAudioFrameResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_CaptureAudioFrameResponse, a, b);
  }
};
_CaptureAudioFrameResponse.runtime = import_protobuf.proto2;
_CaptureAudioFrameResponse.typeName = "livekit.proto.CaptureAudioFrameResponse";
_CaptureAudioFrameResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let CaptureAudioFrameResponse = _CaptureAudioFrameResponse;
const _CaptureAudioFrameCallback = class _CaptureAudioFrameCallback extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _CaptureAudioFrameCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _CaptureAudioFrameCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _CaptureAudioFrameCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_CaptureAudioFrameCallback, a, b);
  }
};
_CaptureAudioFrameCallback.runtime = import_protobuf.proto2;
_CaptureAudioFrameCallback.typeName = "livekit.proto.CaptureAudioFrameCallback";
_CaptureAudioFrameCallback.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let CaptureAudioFrameCallback = _CaptureAudioFrameCallback;
const _ClearAudioBufferRequest = class _ClearAudioBufferRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ClearAudioBufferRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ClearAudioBufferRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ClearAudioBufferRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_ClearAudioBufferRequest, a, b);
  }
};
_ClearAudioBufferRequest.runtime = import_protobuf.proto2;
_ClearAudioBufferRequest.typeName = "livekit.proto.ClearAudioBufferRequest";
_ClearAudioBufferRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "source_handle", kind: "scalar", T: 4, req: true }
]);
let ClearAudioBufferRequest = _ClearAudioBufferRequest;
const _ClearAudioBufferResponse = class _ClearAudioBufferResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ClearAudioBufferResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ClearAudioBufferResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ClearAudioBufferResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_ClearAudioBufferResponse, a, b);
  }
};
_ClearAudioBufferResponse.runtime = import_protobuf.proto2;
_ClearAudioBufferResponse.typeName = "livekit.proto.ClearAudioBufferResponse";
_ClearAudioBufferResponse.fields = import_protobuf.proto2.util.newFieldList(() => []);
let ClearAudioBufferResponse = _ClearAudioBufferResponse;
const _NewAudioResamplerRequest = class _NewAudioResamplerRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewAudioResamplerRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewAudioResamplerRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewAudioResamplerRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewAudioResamplerRequest, a, b);
  }
};
_NewAudioResamplerRequest.runtime = import_protobuf.proto2;
_NewAudioResamplerRequest.typeName = "livekit.proto.NewAudioResamplerRequest";
_NewAudioResamplerRequest.fields = import_protobuf.proto2.util.newFieldList(() => []);
let NewAudioResamplerRequest = _NewAudioResamplerRequest;
const _NewAudioResamplerResponse = class _NewAudioResamplerResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewAudioResamplerResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewAudioResamplerResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewAudioResamplerResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewAudioResamplerResponse, a, b);
  }
};
_NewAudioResamplerResponse.runtime = import_protobuf.proto2;
_NewAudioResamplerResponse.typeName = "livekit.proto.NewAudioResamplerResponse";
_NewAudioResamplerResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "resampler", kind: "message", T: OwnedAudioResampler, req: true }
]);
let NewAudioResamplerResponse = _NewAudioResamplerResponse;
const _RemixAndResampleRequest = class _RemixAndResampleRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RemixAndResampleRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RemixAndResampleRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RemixAndResampleRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_RemixAndResampleRequest, a, b);
  }
};
_RemixAndResampleRequest.runtime = import_protobuf.proto2;
_RemixAndResampleRequest.typeName = "livekit.proto.RemixAndResampleRequest";
_RemixAndResampleRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "resampler_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "buffer", kind: "message", T: AudioFrameBufferInfo, req: true },
  { no: 3, name: "num_channels", kind: "scalar", T: 13, req: true },
  { no: 4, name: "sample_rate", kind: "scalar", T: 13, req: true }
]);
let RemixAndResampleRequest = _RemixAndResampleRequest;
const _RemixAndResampleResponse = class _RemixAndResampleResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RemixAndResampleResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RemixAndResampleResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RemixAndResampleResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_RemixAndResampleResponse, a, b);
  }
};
_RemixAndResampleResponse.runtime = import_protobuf.proto2;
_RemixAndResampleResponse.typeName = "livekit.proto.RemixAndResampleResponse";
_RemixAndResampleResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "buffer", kind: "message", T: OwnedAudioFrameBuffer, req: true }
]);
let RemixAndResampleResponse = _RemixAndResampleResponse;
const _NewSoxResamplerRequest = class _NewSoxResamplerRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewSoxResamplerRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewSoxResamplerRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewSoxResamplerRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewSoxResamplerRequest, a, b);
  }
};
_NewSoxResamplerRequest.runtime = import_protobuf.proto2;
_NewSoxResamplerRequest.typeName = "livekit.proto.NewSoxResamplerRequest";
_NewSoxResamplerRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "input_rate", kind: "scalar", T: 1, req: true },
  { no: 2, name: "output_rate", kind: "scalar", T: 1, req: true },
  { no: 3, name: "num_channels", kind: "scalar", T: 13, req: true },
  { no: 4, name: "input_data_type", kind: "enum", T: import_protobuf.proto2.getEnumType(SoxResamplerDataType), req: true },
  { no: 5, name: "output_data_type", kind: "enum", T: import_protobuf.proto2.getEnumType(SoxResamplerDataType), req: true },
  { no: 6, name: "quality_recipe", kind: "enum", T: import_protobuf.proto2.getEnumType(SoxQualityRecipe), req: true },
  { no: 7, name: "flags", kind: "scalar", T: 13, opt: true }
]);
let NewSoxResamplerRequest = _NewSoxResamplerRequest;
const _NewSoxResamplerResponse = class _NewSoxResamplerResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.NewSoxResamplerResponse.message
     */
    this.message = { case: void 0 };
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _NewSoxResamplerResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _NewSoxResamplerResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _NewSoxResamplerResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_NewSoxResamplerResponse, a, b);
  }
};
_NewSoxResamplerResponse.runtime = import_protobuf.proto2;
_NewSoxResamplerResponse.typeName = "livekit.proto.NewSoxResamplerResponse";
_NewSoxResamplerResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "resampler", kind: "message", T: OwnedSoxResampler, oneof: "message" },
  { no: 2, name: "error", kind: "scalar", T: 9, oneof: "message" }
]);
let NewSoxResamplerResponse = _NewSoxResamplerResponse;
const _PushSoxResamplerRequest = class _PushSoxResamplerRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PushSoxResamplerRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PushSoxResamplerRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PushSoxResamplerRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_PushSoxResamplerRequest, a, b);
  }
};
_PushSoxResamplerRequest.runtime = import_protobuf.proto2;
_PushSoxResamplerRequest.typeName = "livekit.proto.PushSoxResamplerRequest";
_PushSoxResamplerRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "resampler_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "data_ptr", kind: "scalar", T: 4, req: true },
  { no: 3, name: "size", kind: "scalar", T: 13, req: true }
]);
let PushSoxResamplerRequest = _PushSoxResamplerRequest;
const _PushSoxResamplerResponse = class _PushSoxResamplerResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PushSoxResamplerResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PushSoxResamplerResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PushSoxResamplerResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_PushSoxResamplerResponse, a, b);
  }
};
_PushSoxResamplerResponse.runtime = import_protobuf.proto2;
_PushSoxResamplerResponse.typeName = "livekit.proto.PushSoxResamplerResponse";
_PushSoxResamplerResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "output_ptr", kind: "scalar", T: 4, req: true },
  { no: 2, name: "size", kind: "scalar", T: 13, req: true },
  { no: 3, name: "error", kind: "scalar", T: 9, opt: true }
]);
let PushSoxResamplerResponse = _PushSoxResamplerResponse;
const _FlushSoxResamplerRequest = class _FlushSoxResamplerRequest extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _FlushSoxResamplerRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _FlushSoxResamplerRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _FlushSoxResamplerRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_FlushSoxResamplerRequest, a, b);
  }
};
_FlushSoxResamplerRequest.runtime = import_protobuf.proto2;
_FlushSoxResamplerRequest.typeName = "livekit.proto.FlushSoxResamplerRequest";
_FlushSoxResamplerRequest.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "resampler_handle", kind: "scalar", T: 4, req: true }
]);
let FlushSoxResamplerRequest = _FlushSoxResamplerRequest;
const _FlushSoxResamplerResponse = class _FlushSoxResamplerResponse extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _FlushSoxResamplerResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _FlushSoxResamplerResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _FlushSoxResamplerResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_FlushSoxResamplerResponse, a, b);
  }
};
_FlushSoxResamplerResponse.runtime = import_protobuf.proto2;
_FlushSoxResamplerResponse.typeName = "livekit.proto.FlushSoxResamplerResponse";
_FlushSoxResamplerResponse.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "output_ptr", kind: "scalar", T: 4, req: true },
  { no: 2, name: "size", kind: "scalar", T: 13, req: true },
  { no: 3, name: "error", kind: "scalar", T: 9, opt: true }
]);
let FlushSoxResamplerResponse = _FlushSoxResamplerResponse;
const _AudioFrameBufferInfo = class _AudioFrameBufferInfo extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioFrameBufferInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioFrameBufferInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioFrameBufferInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioFrameBufferInfo, a, b);
  }
};
_AudioFrameBufferInfo.runtime = import_protobuf.proto2;
_AudioFrameBufferInfo.typeName = "livekit.proto.AudioFrameBufferInfo";
_AudioFrameBufferInfo.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "data_ptr", kind: "scalar", T: 4, req: true },
  { no: 2, name: "num_channels", kind: "scalar", T: 13, req: true },
  { no: 3, name: "sample_rate", kind: "scalar", T: 13, req: true },
  { no: 4, name: "samples_per_channel", kind: "scalar", T: 13, req: true }
]);
let AudioFrameBufferInfo = _AudioFrameBufferInfo;
const _OwnedAudioFrameBuffer = class _OwnedAudioFrameBuffer extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _OwnedAudioFrameBuffer().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _OwnedAudioFrameBuffer().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _OwnedAudioFrameBuffer().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_OwnedAudioFrameBuffer, a, b);
  }
};
_OwnedAudioFrameBuffer.runtime = import_protobuf.proto2;
_OwnedAudioFrameBuffer.typeName = "livekit.proto.OwnedAudioFrameBuffer";
_OwnedAudioFrameBuffer.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "handle", kind: "message", T: import_handle_pb.FfiOwnedHandle, req: true },
  { no: 2, name: "info", kind: "message", T: AudioFrameBufferInfo, req: true }
]);
let OwnedAudioFrameBuffer = _OwnedAudioFrameBuffer;
const _AudioStreamInfo = class _AudioStreamInfo extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioStreamInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioStreamInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioStreamInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioStreamInfo, a, b);
  }
};
_AudioStreamInfo.runtime = import_protobuf.proto2;
_AudioStreamInfo.typeName = "livekit.proto.AudioStreamInfo";
_AudioStreamInfo.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "type", kind: "enum", T: import_protobuf.proto2.getEnumType(AudioStreamType), req: true }
]);
let AudioStreamInfo = _AudioStreamInfo;
const _OwnedAudioStream = class _OwnedAudioStream extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _OwnedAudioStream().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _OwnedAudioStream().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _OwnedAudioStream().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_OwnedAudioStream, a, b);
  }
};
_OwnedAudioStream.runtime = import_protobuf.proto2;
_OwnedAudioStream.typeName = "livekit.proto.OwnedAudioStream";
_OwnedAudioStream.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "handle", kind: "message", T: import_handle_pb.FfiOwnedHandle, req: true },
  { no: 2, name: "info", kind: "message", T: AudioStreamInfo, req: true }
]);
let OwnedAudioStream = _OwnedAudioStream;
const _AudioStreamEvent = class _AudioStreamEvent extends import_protobuf.Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.AudioStreamEvent.message
     */
    this.message = { case: void 0 };
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioStreamEvent().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioStreamEvent().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioStreamEvent().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioStreamEvent, a, b);
  }
};
_AudioStreamEvent.runtime = import_protobuf.proto2;
_AudioStreamEvent.typeName = "livekit.proto.AudioStreamEvent";
_AudioStreamEvent.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "stream_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "frame_received", kind: "message", T: AudioFrameReceived, oneof: "message" },
  { no: 3, name: "eos", kind: "message", T: AudioStreamEOS, oneof: "message" }
]);
let AudioStreamEvent = _AudioStreamEvent;
const _AudioFrameReceived = class _AudioFrameReceived extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioFrameReceived().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioFrameReceived().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioFrameReceived().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioFrameReceived, a, b);
  }
};
_AudioFrameReceived.runtime = import_protobuf.proto2;
_AudioFrameReceived.typeName = "livekit.proto.AudioFrameReceived";
_AudioFrameReceived.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "frame", kind: "message", T: OwnedAudioFrameBuffer, req: true }
]);
let AudioFrameReceived = _AudioFrameReceived;
const _AudioStreamEOS = class _AudioStreamEOS extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioStreamEOS().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioStreamEOS().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioStreamEOS().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioStreamEOS, a, b);
  }
};
_AudioStreamEOS.runtime = import_protobuf.proto2;
_AudioStreamEOS.typeName = "livekit.proto.AudioStreamEOS";
_AudioStreamEOS.fields = import_protobuf.proto2.util.newFieldList(() => []);
let AudioStreamEOS = _AudioStreamEOS;
const _AudioSourceOptions = class _AudioSourceOptions extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioSourceOptions().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioSourceOptions().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioSourceOptions().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioSourceOptions, a, b);
  }
};
_AudioSourceOptions.runtime = import_protobuf.proto2;
_AudioSourceOptions.typeName = "livekit.proto.AudioSourceOptions";
_AudioSourceOptions.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "echo_cancellation", kind: "scalar", T: 8, req: true },
  { no: 2, name: "noise_suppression", kind: "scalar", T: 8, req: true },
  { no: 3, name: "auto_gain_control", kind: "scalar", T: 8, req: true }
]);
let AudioSourceOptions = _AudioSourceOptions;
const _AudioSourceInfo = class _AudioSourceInfo extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioSourceInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioSourceInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioSourceInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioSourceInfo, a, b);
  }
};
_AudioSourceInfo.runtime = import_protobuf.proto2;
_AudioSourceInfo.typeName = "livekit.proto.AudioSourceInfo";
_AudioSourceInfo.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 2, name: "type", kind: "enum", T: import_protobuf.proto2.getEnumType(AudioSourceType), req: true }
]);
let AudioSourceInfo = _AudioSourceInfo;
const _OwnedAudioSource = class _OwnedAudioSource extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _OwnedAudioSource().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _OwnedAudioSource().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _OwnedAudioSource().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_OwnedAudioSource, a, b);
  }
};
_OwnedAudioSource.runtime = import_protobuf.proto2;
_OwnedAudioSource.typeName = "livekit.proto.OwnedAudioSource";
_OwnedAudioSource.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "handle", kind: "message", T: import_handle_pb.FfiOwnedHandle, req: true },
  { no: 2, name: "info", kind: "message", T: AudioSourceInfo, req: true }
]);
let OwnedAudioSource = _OwnedAudioSource;
const _AudioResamplerInfo = class _AudioResamplerInfo extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioResamplerInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioResamplerInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioResamplerInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_AudioResamplerInfo, a, b);
  }
};
_AudioResamplerInfo.runtime = import_protobuf.proto2;
_AudioResamplerInfo.typeName = "livekit.proto.AudioResamplerInfo";
_AudioResamplerInfo.fields = import_protobuf.proto2.util.newFieldList(() => []);
let AudioResamplerInfo = _AudioResamplerInfo;
const _OwnedAudioResampler = class _OwnedAudioResampler extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _OwnedAudioResampler().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _OwnedAudioResampler().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _OwnedAudioResampler().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_OwnedAudioResampler, a, b);
  }
};
_OwnedAudioResampler.runtime = import_protobuf.proto2;
_OwnedAudioResampler.typeName = "livekit.proto.OwnedAudioResampler";
_OwnedAudioResampler.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "handle", kind: "message", T: import_handle_pb.FfiOwnedHandle, req: true },
  { no: 2, name: "info", kind: "message", T: AudioResamplerInfo, req: true }
]);
let OwnedAudioResampler = _OwnedAudioResampler;
const _SoxResamplerInfo = class _SoxResamplerInfo extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SoxResamplerInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SoxResamplerInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SoxResamplerInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_SoxResamplerInfo, a, b);
  }
};
_SoxResamplerInfo.runtime = import_protobuf.proto2;
_SoxResamplerInfo.typeName = "livekit.proto.SoxResamplerInfo";
_SoxResamplerInfo.fields = import_protobuf.proto2.util.newFieldList(() => []);
let SoxResamplerInfo = _SoxResamplerInfo;
const _OwnedSoxResampler = class _OwnedSoxResampler extends import_protobuf.Message {
  constructor(data) {
    super();
    import_protobuf.proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _OwnedSoxResampler().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _OwnedSoxResampler().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _OwnedSoxResampler().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto2.util.equals(_OwnedSoxResampler, a, b);
  }
};
_OwnedSoxResampler.runtime = import_protobuf.proto2;
_OwnedSoxResampler.typeName = "livekit.proto.OwnedSoxResampler";
_OwnedSoxResampler.fields = import_protobuf.proto2.util.newFieldList(() => [
  { no: 1, name: "handle", kind: "message", T: import_handle_pb.FfiOwnedHandle, req: true },
  { no: 2, name: "info", kind: "message", T: SoxResamplerInfo, req: true }
]);
let OwnedSoxResampler = _OwnedSoxResampler;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AudioFrameBufferInfo,
  AudioFrameReceived,
  AudioResamplerInfo,
  AudioSourceInfo,
  AudioSourceOptions,
  AudioSourceType,
  AudioStreamEOS,
  AudioStreamEvent,
  AudioStreamFromParticipantRequest,
  AudioStreamFromParticipantResponse,
  AudioStreamInfo,
  AudioStreamType,
  CaptureAudioFrameCallback,
  CaptureAudioFrameRequest,
  CaptureAudioFrameResponse,
  ClearAudioBufferRequest,
  ClearAudioBufferResponse,
  FlushSoxResamplerRequest,
  FlushSoxResamplerResponse,
  NewAudioResamplerRequest,
  NewAudioResamplerResponse,
  NewAudioSourceRequest,
  NewAudioSourceResponse,
  NewAudioStreamRequest,
  NewAudioStreamResponse,
  NewSoxResamplerRequest,
  NewSoxResamplerResponse,
  OwnedAudioFrameBuffer,
  OwnedAudioResampler,
  OwnedAudioSource,
  OwnedAudioStream,
  OwnedSoxResampler,
  PushSoxResamplerRequest,
  PushSoxResamplerResponse,
  RemixAndResampleRequest,
  RemixAndResampleResponse,
  SoxFlagBits,
  SoxQualityRecipe,
  SoxResamplerDataType,
  SoxResamplerInfo
});
//# sourceMappingURL=audio_frame_pb.cjs.map