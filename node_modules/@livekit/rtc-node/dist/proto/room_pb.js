import { Message, proto2 } from "@bufbuild/protobuf";
import { DisconnectReason, OwnedParticipant } from "./participant_pb.js";
import { OwnedTrack, OwnedTrackPublication, TrackSource } from "./track_pb.js";
import { RtcStats } from "./stats_pb.js";
import { VideoCodec } from "./video_frame_pb.js";
import { E2eeOptions, EncryptionState } from "./e2ee_pb.js";
import { FfiOwnedHandle } from "./handle_pb.js";
var IceTransportType = /* @__PURE__ */ ((IceTransportType2) => {
  IceTransportType2[IceTransportType2["TRANSPORT_RELAY"] = 0] = "TRANSPORT_RELAY";
  IceTransportType2[IceTransportType2["TRANSPORT_NOHOST"] = 1] = "TRANSPORT_NOHOST";
  IceTransportType2[IceTransportType2["TRANSPORT_ALL"] = 2] = "TRANSPORT_ALL";
  return IceTransportType2;
})(IceTransportType || {});
proto2.util.setEnumType(IceTransportType, "livekit.proto.IceTransportType", [
  { no: 0, name: "TRANSPORT_RELAY" },
  { no: 1, name: "TRANSPORT_NOHOST" },
  { no: 2, name: "TRANSPORT_ALL" }
]);
var ContinualGatheringPolicy = /* @__PURE__ */ ((ContinualGatheringPolicy2) => {
  ContinualGatheringPolicy2[ContinualGatheringPolicy2["GATHER_ONCE"] = 0] = "GATHER_ONCE";
  ContinualGatheringPolicy2[ContinualGatheringPolicy2["GATHER_CONTINUALLY"] = 1] = "GATHER_CONTINUALLY";
  return ContinualGatheringPolicy2;
})(ContinualGatheringPolicy || {});
proto2.util.setEnumType(ContinualGatheringPolicy, "livekit.proto.ContinualGatheringPolicy", [
  { no: 0, name: "GATHER_ONCE" },
  { no: 1, name: "GATHER_CONTINUALLY" }
]);
var ConnectionQuality = /* @__PURE__ */ ((ConnectionQuality2) => {
  ConnectionQuality2[ConnectionQuality2["QUALITY_POOR"] = 0] = "QUALITY_POOR";
  ConnectionQuality2[ConnectionQuality2["QUALITY_GOOD"] = 1] = "QUALITY_GOOD";
  ConnectionQuality2[ConnectionQuality2["QUALITY_EXCELLENT"] = 2] = "QUALITY_EXCELLENT";
  ConnectionQuality2[ConnectionQuality2["QUALITY_LOST"] = 3] = "QUALITY_LOST";
  return ConnectionQuality2;
})(ConnectionQuality || {});
proto2.util.setEnumType(ConnectionQuality, "livekit.proto.ConnectionQuality", [
  { no: 0, name: "QUALITY_POOR" },
  { no: 1, name: "QUALITY_GOOD" },
  { no: 2, name: "QUALITY_EXCELLENT" },
  { no: 3, name: "QUALITY_LOST" }
]);
var ConnectionState = /* @__PURE__ */ ((ConnectionState2) => {
  ConnectionState2[ConnectionState2["CONN_DISCONNECTED"] = 0] = "CONN_DISCONNECTED";
  ConnectionState2[ConnectionState2["CONN_CONNECTED"] = 1] = "CONN_CONNECTED";
  ConnectionState2[ConnectionState2["CONN_RECONNECTING"] = 2] = "CONN_RECONNECTING";
  return ConnectionState2;
})(ConnectionState || {});
proto2.util.setEnumType(ConnectionState, "livekit.proto.ConnectionState", [
  { no: 0, name: "CONN_DISCONNECTED" },
  { no: 1, name: "CONN_CONNECTED" },
  { no: 2, name: "CONN_RECONNECTING" }
]);
var DataPacketKind = /* @__PURE__ */ ((DataPacketKind2) => {
  DataPacketKind2[DataPacketKind2["KIND_LOSSY"] = 0] = "KIND_LOSSY";
  DataPacketKind2[DataPacketKind2["KIND_RELIABLE"] = 1] = "KIND_RELIABLE";
  return DataPacketKind2;
})(DataPacketKind || {});
proto2.util.setEnumType(DataPacketKind, "livekit.proto.DataPacketKind", [
  { no: 0, name: "KIND_LOSSY" },
  { no: 1, name: "KIND_RELIABLE" }
]);
const _ConnectRequest = class _ConnectRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ConnectRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ConnectRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ConnectRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ConnectRequest, a, b);
  }
};
_ConnectRequest.runtime = proto2;
_ConnectRequest.typeName = "livekit.proto.ConnectRequest";
_ConnectRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "url", kind: "scalar", T: 9, req: true },
  { no: 2, name: "token", kind: "scalar", T: 9, req: true },
  { no: 3, name: "options", kind: "message", T: RoomOptions, req: true }
]);
let ConnectRequest = _ConnectRequest;
const _ConnectResponse = class _ConnectResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ConnectResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ConnectResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ConnectResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ConnectResponse, a, b);
  }
};
_ConnectResponse.runtime = proto2;
_ConnectResponse.typeName = "livekit.proto.ConnectResponse";
_ConnectResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let ConnectResponse = _ConnectResponse;
const _ConnectCallback = class _ConnectCallback extends Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.ConnectCallback.message
     */
    this.message = { case: void 0 };
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ConnectCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ConnectCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ConnectCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ConnectCallback, a, b);
  }
};
_ConnectCallback.runtime = proto2;
_ConnectCallback.typeName = "livekit.proto.ConnectCallback";
_ConnectCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, oneof: "message" },
  { no: 3, name: "result", kind: "message", T: ConnectCallback_Result, oneof: "message" }
]);
let ConnectCallback = _ConnectCallback;
const _ConnectCallback_ParticipantWithTracks = class _ConnectCallback_ParticipantWithTracks extends Message {
  constructor(data) {
    super();
    /**
     * TrackInfo are not needed here, if we're subscribed to a track, the FfiServer will send
     * a TrackSubscribed event
     *
     * @generated from field: repeated livekit.proto.OwnedTrackPublication publications = 2;
     */
    this.publications = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ConnectCallback_ParticipantWithTracks().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ConnectCallback_ParticipantWithTracks().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ConnectCallback_ParticipantWithTracks().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ConnectCallback_ParticipantWithTracks, a, b);
  }
};
_ConnectCallback_ParticipantWithTracks.runtime = proto2;
_ConnectCallback_ParticipantWithTracks.typeName = "livekit.proto.ConnectCallback.ParticipantWithTracks";
_ConnectCallback_ParticipantWithTracks.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant", kind: "message", T: OwnedParticipant, req: true },
  { no: 2, name: "publications", kind: "message", T: OwnedTrackPublication, repeated: true }
]);
let ConnectCallback_ParticipantWithTracks = _ConnectCallback_ParticipantWithTracks;
const _ConnectCallback_Result = class _ConnectCallback_Result extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated livekit.proto.ConnectCallback.ParticipantWithTracks participants = 3;
     */
    this.participants = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ConnectCallback_Result().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ConnectCallback_Result().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ConnectCallback_Result().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ConnectCallback_Result, a, b);
  }
};
_ConnectCallback_Result.runtime = proto2;
_ConnectCallback_Result.typeName = "livekit.proto.ConnectCallback.Result";
_ConnectCallback_Result.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "room", kind: "message", T: OwnedRoom, req: true },
  { no: 2, name: "local_participant", kind: "message", T: OwnedParticipant, req: true },
  { no: 3, name: "participants", kind: "message", T: ConnectCallback_ParticipantWithTracks, repeated: true }
]);
let ConnectCallback_Result = _ConnectCallback_Result;
const _DisconnectRequest = class _DisconnectRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DisconnectRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DisconnectRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DisconnectRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DisconnectRequest, a, b);
  }
};
_DisconnectRequest.runtime = proto2;
_DisconnectRequest.typeName = "livekit.proto.DisconnectRequest";
_DisconnectRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "room_handle", kind: "scalar", T: 4, req: true }
]);
let DisconnectRequest = _DisconnectRequest;
const _DisconnectResponse = class _DisconnectResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DisconnectResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DisconnectResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DisconnectResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DisconnectResponse, a, b);
  }
};
_DisconnectResponse.runtime = proto2;
_DisconnectResponse.typeName = "livekit.proto.DisconnectResponse";
_DisconnectResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let DisconnectResponse = _DisconnectResponse;
const _DisconnectCallback = class _DisconnectCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DisconnectCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DisconnectCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DisconnectCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DisconnectCallback, a, b);
  }
};
_DisconnectCallback.runtime = proto2;
_DisconnectCallback.typeName = "livekit.proto.DisconnectCallback";
_DisconnectCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let DisconnectCallback = _DisconnectCallback;
const _PublishTrackRequest = class _PublishTrackRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishTrackRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishTrackRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishTrackRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishTrackRequest, a, b);
  }
};
_PublishTrackRequest.runtime = proto2;
_PublishTrackRequest.typeName = "livekit.proto.PublishTrackRequest";
_PublishTrackRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "track_handle", kind: "scalar", T: 4, req: true },
  { no: 3, name: "options", kind: "message", T: TrackPublishOptions, req: true }
]);
let PublishTrackRequest = _PublishTrackRequest;
const _PublishTrackResponse = class _PublishTrackResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishTrackResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishTrackResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishTrackResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishTrackResponse, a, b);
  }
};
_PublishTrackResponse.runtime = proto2;
_PublishTrackResponse.typeName = "livekit.proto.PublishTrackResponse";
_PublishTrackResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let PublishTrackResponse = _PublishTrackResponse;
const _PublishTrackCallback = class _PublishTrackCallback extends Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.PublishTrackCallback.message
     */
    this.message = { case: void 0 };
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishTrackCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishTrackCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishTrackCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishTrackCallback, a, b);
  }
};
_PublishTrackCallback.runtime = proto2;
_PublishTrackCallback.typeName = "livekit.proto.PublishTrackCallback";
_PublishTrackCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, oneof: "message" },
  { no: 3, name: "publication", kind: "message", T: OwnedTrackPublication, oneof: "message" }
]);
let PublishTrackCallback = _PublishTrackCallback;
const _UnpublishTrackRequest = class _UnpublishTrackRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _UnpublishTrackRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _UnpublishTrackRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _UnpublishTrackRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_UnpublishTrackRequest, a, b);
  }
};
_UnpublishTrackRequest.runtime = proto2;
_UnpublishTrackRequest.typeName = "livekit.proto.UnpublishTrackRequest";
_UnpublishTrackRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "track_sid", kind: "scalar", T: 9, req: true },
  { no: 3, name: "stop_on_unpublish", kind: "scalar", T: 8, req: true }
]);
let UnpublishTrackRequest = _UnpublishTrackRequest;
const _UnpublishTrackResponse = class _UnpublishTrackResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _UnpublishTrackResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _UnpublishTrackResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _UnpublishTrackResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_UnpublishTrackResponse, a, b);
  }
};
_UnpublishTrackResponse.runtime = proto2;
_UnpublishTrackResponse.typeName = "livekit.proto.UnpublishTrackResponse";
_UnpublishTrackResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let UnpublishTrackResponse = _UnpublishTrackResponse;
const _UnpublishTrackCallback = class _UnpublishTrackCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _UnpublishTrackCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _UnpublishTrackCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _UnpublishTrackCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_UnpublishTrackCallback, a, b);
  }
};
_UnpublishTrackCallback.runtime = proto2;
_UnpublishTrackCallback.typeName = "livekit.proto.UnpublishTrackCallback";
_UnpublishTrackCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let UnpublishTrackCallback = _UnpublishTrackCallback;
const _PublishDataRequest = class _PublishDataRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string destination_sids = 5 [deprecated = true];
     * @deprecated
     */
    this.destinationSids = [];
    /**
     * @generated from field: repeated string destination_identities = 7;
     */
    this.destinationIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishDataRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishDataRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishDataRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishDataRequest, a, b);
  }
};
_PublishDataRequest.runtime = proto2;
_PublishDataRequest.typeName = "livekit.proto.PublishDataRequest";
_PublishDataRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "data_ptr", kind: "scalar", T: 4, req: true },
  { no: 3, name: "data_len", kind: "scalar", T: 4, req: true },
  { no: 4, name: "reliable", kind: "scalar", T: 8, req: true },
  { no: 5, name: "destination_sids", kind: "scalar", T: 9, repeated: true },
  { no: 6, name: "topic", kind: "scalar", T: 9, opt: true },
  { no: 7, name: "destination_identities", kind: "scalar", T: 9, repeated: true }
]);
let PublishDataRequest = _PublishDataRequest;
const _PublishDataResponse = class _PublishDataResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishDataResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishDataResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishDataResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishDataResponse, a, b);
  }
};
_PublishDataResponse.runtime = proto2;
_PublishDataResponse.typeName = "livekit.proto.PublishDataResponse";
_PublishDataResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let PublishDataResponse = _PublishDataResponse;
const _PublishDataCallback = class _PublishDataCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishDataCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishDataCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishDataCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishDataCallback, a, b);
  }
};
_PublishDataCallback.runtime = proto2;
_PublishDataCallback.typeName = "livekit.proto.PublishDataCallback";
_PublishDataCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let PublishDataCallback = _PublishDataCallback;
const _PublishTranscriptionRequest = class _PublishTranscriptionRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 4;
     */
    this.segments = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishTranscriptionRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishTranscriptionRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishTranscriptionRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishTranscriptionRequest, a, b);
  }
};
_PublishTranscriptionRequest.runtime = proto2;
_PublishTranscriptionRequest.typeName = "livekit.proto.PublishTranscriptionRequest";
_PublishTranscriptionRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 3, name: "track_id", kind: "scalar", T: 9, req: true },
  { no: 4, name: "segments", kind: "message", T: TranscriptionSegment, repeated: true }
]);
let PublishTranscriptionRequest = _PublishTranscriptionRequest;
const _PublishTranscriptionResponse = class _PublishTranscriptionResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishTranscriptionResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishTranscriptionResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishTranscriptionResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishTranscriptionResponse, a, b);
  }
};
_PublishTranscriptionResponse.runtime = proto2;
_PublishTranscriptionResponse.typeName = "livekit.proto.PublishTranscriptionResponse";
_PublishTranscriptionResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let PublishTranscriptionResponse = _PublishTranscriptionResponse;
const _PublishTranscriptionCallback = class _PublishTranscriptionCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishTranscriptionCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishTranscriptionCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishTranscriptionCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishTranscriptionCallback, a, b);
  }
};
_PublishTranscriptionCallback.runtime = proto2;
_PublishTranscriptionCallback.typeName = "livekit.proto.PublishTranscriptionCallback";
_PublishTranscriptionCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let PublishTranscriptionCallback = _PublishTranscriptionCallback;
const _PublishSipDtmfRequest = class _PublishSipDtmfRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string destination_identities = 4;
     */
    this.destinationIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishSipDtmfRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishSipDtmfRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishSipDtmfRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishSipDtmfRequest, a, b);
  }
};
_PublishSipDtmfRequest.runtime = proto2;
_PublishSipDtmfRequest.typeName = "livekit.proto.PublishSipDtmfRequest";
_PublishSipDtmfRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "code", kind: "scalar", T: 13, req: true },
  { no: 3, name: "digit", kind: "scalar", T: 9, req: true },
  { no: 4, name: "destination_identities", kind: "scalar", T: 9, repeated: true }
]);
let PublishSipDtmfRequest = _PublishSipDtmfRequest;
const _PublishSipDtmfResponse = class _PublishSipDtmfResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishSipDtmfResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishSipDtmfResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishSipDtmfResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishSipDtmfResponse, a, b);
  }
};
_PublishSipDtmfResponse.runtime = proto2;
_PublishSipDtmfResponse.typeName = "livekit.proto.PublishSipDtmfResponse";
_PublishSipDtmfResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let PublishSipDtmfResponse = _PublishSipDtmfResponse;
const _PublishSipDtmfCallback = class _PublishSipDtmfCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _PublishSipDtmfCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _PublishSipDtmfCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _PublishSipDtmfCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_PublishSipDtmfCallback, a, b);
  }
};
_PublishSipDtmfCallback.runtime = proto2;
_PublishSipDtmfCallback.typeName = "livekit.proto.PublishSipDtmfCallback";
_PublishSipDtmfCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let PublishSipDtmfCallback = _PublishSipDtmfCallback;
const _SetLocalMetadataRequest = class _SetLocalMetadataRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalMetadataRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalMetadataRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalMetadataRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalMetadataRequest, a, b);
  }
};
_SetLocalMetadataRequest.runtime = proto2;
_SetLocalMetadataRequest.typeName = "livekit.proto.SetLocalMetadataRequest";
_SetLocalMetadataRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "metadata", kind: "scalar", T: 9, req: true }
]);
let SetLocalMetadataRequest = _SetLocalMetadataRequest;
const _SetLocalMetadataResponse = class _SetLocalMetadataResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalMetadataResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalMetadataResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalMetadataResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalMetadataResponse, a, b);
  }
};
_SetLocalMetadataResponse.runtime = proto2;
_SetLocalMetadataResponse.typeName = "livekit.proto.SetLocalMetadataResponse";
_SetLocalMetadataResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let SetLocalMetadataResponse = _SetLocalMetadataResponse;
const _SetLocalMetadataCallback = class _SetLocalMetadataCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalMetadataCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalMetadataCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalMetadataCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalMetadataCallback, a, b);
  }
};
_SetLocalMetadataCallback.runtime = proto2;
_SetLocalMetadataCallback.typeName = "livekit.proto.SetLocalMetadataCallback";
_SetLocalMetadataCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let SetLocalMetadataCallback = _SetLocalMetadataCallback;
const _SendChatMessageRequest = class _SendChatMessageRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string destination_identities = 3;
     */
    this.destinationIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendChatMessageRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendChatMessageRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendChatMessageRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendChatMessageRequest, a, b);
  }
};
_SendChatMessageRequest.runtime = proto2;
_SendChatMessageRequest.typeName = "livekit.proto.SendChatMessageRequest";
_SendChatMessageRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "message", kind: "scalar", T: 9, req: true },
  { no: 3, name: "destination_identities", kind: "scalar", T: 9, repeated: true },
  { no: 4, name: "sender_identity", kind: "scalar", T: 9, opt: true }
]);
let SendChatMessageRequest = _SendChatMessageRequest;
const _EditChatMessageRequest = class _EditChatMessageRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string destination_identities = 4;
     */
    this.destinationIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _EditChatMessageRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _EditChatMessageRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _EditChatMessageRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_EditChatMessageRequest, a, b);
  }
};
_EditChatMessageRequest.runtime = proto2;
_EditChatMessageRequest.typeName = "livekit.proto.EditChatMessageRequest";
_EditChatMessageRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "edit_text", kind: "scalar", T: 9, req: true },
  { no: 3, name: "original_message", kind: "message", T: ChatMessage, req: true },
  { no: 4, name: "destination_identities", kind: "scalar", T: 9, repeated: true },
  { no: 5, name: "sender_identity", kind: "scalar", T: 9, opt: true }
]);
let EditChatMessageRequest = _EditChatMessageRequest;
const _SendChatMessageResponse = class _SendChatMessageResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendChatMessageResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendChatMessageResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendChatMessageResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendChatMessageResponse, a, b);
  }
};
_SendChatMessageResponse.runtime = proto2;
_SendChatMessageResponse.typeName = "livekit.proto.SendChatMessageResponse";
_SendChatMessageResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let SendChatMessageResponse = _SendChatMessageResponse;
const _SendChatMessageCallback = class _SendChatMessageCallback extends Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.SendChatMessageCallback.message
     */
    this.message = { case: void 0 };
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendChatMessageCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendChatMessageCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendChatMessageCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendChatMessageCallback, a, b);
  }
};
_SendChatMessageCallback.runtime = proto2;
_SendChatMessageCallback.typeName = "livekit.proto.SendChatMessageCallback";
_SendChatMessageCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, oneof: "message" },
  { no: 3, name: "chat_message", kind: "message", T: ChatMessage, oneof: "message" }
]);
let SendChatMessageCallback = _SendChatMessageCallback;
const _SetLocalAttributesRequest = class _SetLocalAttributesRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated livekit.proto.AttributesEntry attributes = 2;
     */
    this.attributes = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalAttributesRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalAttributesRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalAttributesRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalAttributesRequest, a, b);
  }
};
_SetLocalAttributesRequest.runtime = proto2;
_SetLocalAttributesRequest.typeName = "livekit.proto.SetLocalAttributesRequest";
_SetLocalAttributesRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "attributes", kind: "message", T: AttributesEntry, repeated: true }
]);
let SetLocalAttributesRequest = _SetLocalAttributesRequest;
const _AttributesEntry = class _AttributesEntry extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AttributesEntry().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AttributesEntry().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AttributesEntry().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_AttributesEntry, a, b);
  }
};
_AttributesEntry.runtime = proto2;
_AttributesEntry.typeName = "livekit.proto.AttributesEntry";
_AttributesEntry.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "key", kind: "scalar", T: 9, req: true },
  { no: 2, name: "value", kind: "scalar", T: 9, req: true }
]);
let AttributesEntry = _AttributesEntry;
const _SetLocalAttributesResponse = class _SetLocalAttributesResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalAttributesResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalAttributesResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalAttributesResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalAttributesResponse, a, b);
  }
};
_SetLocalAttributesResponse.runtime = proto2;
_SetLocalAttributesResponse.typeName = "livekit.proto.SetLocalAttributesResponse";
_SetLocalAttributesResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let SetLocalAttributesResponse = _SetLocalAttributesResponse;
const _SetLocalAttributesCallback = class _SetLocalAttributesCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalAttributesCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalAttributesCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalAttributesCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalAttributesCallback, a, b);
  }
};
_SetLocalAttributesCallback.runtime = proto2;
_SetLocalAttributesCallback.typeName = "livekit.proto.SetLocalAttributesCallback";
_SetLocalAttributesCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let SetLocalAttributesCallback = _SetLocalAttributesCallback;
const _SetLocalNameRequest = class _SetLocalNameRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalNameRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalNameRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalNameRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalNameRequest, a, b);
  }
};
_SetLocalNameRequest.runtime = proto2;
_SetLocalNameRequest.typeName = "livekit.proto.SetLocalNameRequest";
_SetLocalNameRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "name", kind: "scalar", T: 9, req: true }
]);
let SetLocalNameRequest = _SetLocalNameRequest;
const _SetLocalNameResponse = class _SetLocalNameResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalNameResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalNameResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalNameResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalNameResponse, a, b);
  }
};
_SetLocalNameResponse.runtime = proto2;
_SetLocalNameResponse.typeName = "livekit.proto.SetLocalNameResponse";
_SetLocalNameResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let SetLocalNameResponse = _SetLocalNameResponse;
const _SetLocalNameCallback = class _SetLocalNameCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetLocalNameCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetLocalNameCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetLocalNameCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetLocalNameCallback, a, b);
  }
};
_SetLocalNameCallback.runtime = proto2;
_SetLocalNameCallback.typeName = "livekit.proto.SetLocalNameCallback";
_SetLocalNameCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let SetLocalNameCallback = _SetLocalNameCallback;
const _SetSubscribedRequest = class _SetSubscribedRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetSubscribedRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetSubscribedRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetSubscribedRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetSubscribedRequest, a, b);
  }
};
_SetSubscribedRequest.runtime = proto2;
_SetSubscribedRequest.typeName = "livekit.proto.SetSubscribedRequest";
_SetSubscribedRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "subscribe", kind: "scalar", T: 8, req: true },
  { no: 2, name: "publication_handle", kind: "scalar", T: 4, req: true }
]);
let SetSubscribedRequest = _SetSubscribedRequest;
const _SetSubscribedResponse = class _SetSubscribedResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetSubscribedResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetSubscribedResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetSubscribedResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetSubscribedResponse, a, b);
  }
};
_SetSubscribedResponse.runtime = proto2;
_SetSubscribedResponse.typeName = "livekit.proto.SetSubscribedResponse";
_SetSubscribedResponse.fields = proto2.util.newFieldList(() => []);
let SetSubscribedResponse = _SetSubscribedResponse;
const _GetSessionStatsRequest = class _GetSessionStatsRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _GetSessionStatsRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _GetSessionStatsRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _GetSessionStatsRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_GetSessionStatsRequest, a, b);
  }
};
_GetSessionStatsRequest.runtime = proto2;
_GetSessionStatsRequest.typeName = "livekit.proto.GetSessionStatsRequest";
_GetSessionStatsRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "room_handle", kind: "scalar", T: 4, req: true }
]);
let GetSessionStatsRequest = _GetSessionStatsRequest;
const _GetSessionStatsResponse = class _GetSessionStatsResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _GetSessionStatsResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _GetSessionStatsResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _GetSessionStatsResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_GetSessionStatsResponse, a, b);
  }
};
_GetSessionStatsResponse.runtime = proto2;
_GetSessionStatsResponse.typeName = "livekit.proto.GetSessionStatsResponse";
_GetSessionStatsResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let GetSessionStatsResponse = _GetSessionStatsResponse;
const _GetSessionStatsCallback = class _GetSessionStatsCallback extends Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.GetSessionStatsCallback.message
     */
    this.message = { case: void 0 };
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _GetSessionStatsCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _GetSessionStatsCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _GetSessionStatsCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_GetSessionStatsCallback, a, b);
  }
};
_GetSessionStatsCallback.runtime = proto2;
_GetSessionStatsCallback.typeName = "livekit.proto.GetSessionStatsCallback";
_GetSessionStatsCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, oneof: "message" },
  { no: 3, name: "result", kind: "message", T: GetSessionStatsCallback_Result, oneof: "message" }
]);
let GetSessionStatsCallback = _GetSessionStatsCallback;
const _GetSessionStatsCallback_Result = class _GetSessionStatsCallback_Result extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated livekit.proto.RtcStats publisher_stats = 1;
     */
    this.publisherStats = [];
    /**
     * @generated from field: repeated livekit.proto.RtcStats subscriber_stats = 2;
     */
    this.subscriberStats = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _GetSessionStatsCallback_Result().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _GetSessionStatsCallback_Result().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _GetSessionStatsCallback_Result().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_GetSessionStatsCallback_Result, a, b);
  }
};
_GetSessionStatsCallback_Result.runtime = proto2;
_GetSessionStatsCallback_Result.typeName = "livekit.proto.GetSessionStatsCallback.Result";
_GetSessionStatsCallback_Result.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "publisher_stats", kind: "message", T: RtcStats, repeated: true },
  { no: 2, name: "subscriber_stats", kind: "message", T: RtcStats, repeated: true }
]);
let GetSessionStatsCallback_Result = _GetSessionStatsCallback_Result;
const _VideoEncoding = class _VideoEncoding extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _VideoEncoding().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _VideoEncoding().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _VideoEncoding().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_VideoEncoding, a, b);
  }
};
_VideoEncoding.runtime = proto2;
_VideoEncoding.typeName = "livekit.proto.VideoEncoding";
_VideoEncoding.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "max_bitrate", kind: "scalar", T: 4, req: true },
  { no: 2, name: "max_framerate", kind: "scalar", T: 1, req: true }
]);
let VideoEncoding = _VideoEncoding;
const _AudioEncoding = class _AudioEncoding extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _AudioEncoding().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _AudioEncoding().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _AudioEncoding().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_AudioEncoding, a, b);
  }
};
_AudioEncoding.runtime = proto2;
_AudioEncoding.typeName = "livekit.proto.AudioEncoding";
_AudioEncoding.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "max_bitrate", kind: "scalar", T: 4, req: true }
]);
let AudioEncoding = _AudioEncoding;
const _TrackPublishOptions = class _TrackPublishOptions extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackPublishOptions().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackPublishOptions().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackPublishOptions().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackPublishOptions, a, b);
  }
};
_TrackPublishOptions.runtime = proto2;
_TrackPublishOptions.typeName = "livekit.proto.TrackPublishOptions";
_TrackPublishOptions.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "video_encoding", kind: "message", T: VideoEncoding, opt: true },
  { no: 2, name: "audio_encoding", kind: "message", T: AudioEncoding, opt: true },
  { no: 3, name: "video_codec", kind: "enum", T: proto2.getEnumType(VideoCodec), opt: true },
  { no: 4, name: "dtx", kind: "scalar", T: 8, opt: true },
  { no: 5, name: "red", kind: "scalar", T: 8, opt: true },
  { no: 6, name: "simulcast", kind: "scalar", T: 8, opt: true },
  { no: 7, name: "source", kind: "enum", T: proto2.getEnumType(TrackSource), opt: true },
  { no: 8, name: "stream", kind: "scalar", T: 9, opt: true }
]);
let TrackPublishOptions = _TrackPublishOptions;
const _IceServer = class _IceServer extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string urls = 1;
     */
    this.urls = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _IceServer().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _IceServer().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _IceServer().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_IceServer, a, b);
  }
};
_IceServer.runtime = proto2;
_IceServer.typeName = "livekit.proto.IceServer";
_IceServer.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "urls", kind: "scalar", T: 9, repeated: true },
  { no: 2, name: "username", kind: "scalar", T: 9, opt: true },
  { no: 3, name: "password", kind: "scalar", T: 9, opt: true }
]);
let IceServer = _IceServer;
const _RtcConfig = class _RtcConfig extends Message {
  constructor(data) {
    super();
    /**
     * empty fallback to default
     *
     * @generated from field: repeated livekit.proto.IceServer ice_servers = 3;
     */
    this.iceServers = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RtcConfig().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RtcConfig().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RtcConfig().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_RtcConfig, a, b);
  }
};
_RtcConfig.runtime = proto2;
_RtcConfig.typeName = "livekit.proto.RtcConfig";
_RtcConfig.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "ice_transport_type", kind: "enum", T: proto2.getEnumType(IceTransportType), opt: true },
  { no: 2, name: "continual_gathering_policy", kind: "enum", T: proto2.getEnumType(ContinualGatheringPolicy), opt: true },
  { no: 3, name: "ice_servers", kind: "message", T: IceServer, repeated: true }
]);
let RtcConfig = _RtcConfig;
const _RoomOptions = class _RoomOptions extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RoomOptions().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RoomOptions().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RoomOptions().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_RoomOptions, a, b);
  }
};
_RoomOptions.runtime = proto2;
_RoomOptions.typeName = "livekit.proto.RoomOptions";
_RoomOptions.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "auto_subscribe", kind: "scalar", T: 8, opt: true },
  { no: 2, name: "adaptive_stream", kind: "scalar", T: 8, opt: true },
  { no: 3, name: "dynacast", kind: "scalar", T: 8, opt: true },
  { no: 4, name: "e2ee", kind: "message", T: E2eeOptions, opt: true },
  { no: 5, name: "rtc_config", kind: "message", T: RtcConfig, opt: true },
  { no: 6, name: "join_retries", kind: "scalar", T: 13, opt: true }
]);
let RoomOptions = _RoomOptions;
const _TranscriptionSegment = class _TranscriptionSegment extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TranscriptionSegment().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TranscriptionSegment().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TranscriptionSegment().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TranscriptionSegment, a, b);
  }
};
_TranscriptionSegment.runtime = proto2;
_TranscriptionSegment.typeName = "livekit.proto.TranscriptionSegment";
_TranscriptionSegment.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "id", kind: "scalar", T: 9, req: true },
  { no: 2, name: "text", kind: "scalar", T: 9, req: true },
  { no: 3, name: "start_time", kind: "scalar", T: 4, req: true },
  { no: 4, name: "end_time", kind: "scalar", T: 4, req: true },
  { no: 5, name: "final", kind: "scalar", T: 8, req: true },
  { no: 6, name: "language", kind: "scalar", T: 9, req: true }
]);
let TranscriptionSegment = _TranscriptionSegment;
const _BufferInfo = class _BufferInfo extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _BufferInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _BufferInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _BufferInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_BufferInfo, a, b);
  }
};
_BufferInfo.runtime = proto2;
_BufferInfo.typeName = "livekit.proto.BufferInfo";
_BufferInfo.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "data_ptr", kind: "scalar", T: 4, req: true },
  { no: 2, name: "data_len", kind: "scalar", T: 4, req: true }
]);
let BufferInfo = _BufferInfo;
const _OwnedBuffer = class _OwnedBuffer extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _OwnedBuffer().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _OwnedBuffer().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _OwnedBuffer().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_OwnedBuffer, a, b);
  }
};
_OwnedBuffer.runtime = proto2;
_OwnedBuffer.typeName = "livekit.proto.OwnedBuffer";
_OwnedBuffer.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle, req: true },
  { no: 2, name: "data", kind: "message", T: BufferInfo, req: true }
]);
let OwnedBuffer = _OwnedBuffer;
const _RoomEvent = class _RoomEvent extends Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.RoomEvent.message
     */
    this.message = { case: void 0 };
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RoomEvent().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RoomEvent().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RoomEvent().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_RoomEvent, a, b);
  }
};
_RoomEvent.runtime = proto2;
_RoomEvent.typeName = "livekit.proto.RoomEvent";
_RoomEvent.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "room_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "participant_connected", kind: "message", T: ParticipantConnected, oneof: "message" },
  { no: 3, name: "participant_disconnected", kind: "message", T: ParticipantDisconnected, oneof: "message" },
  { no: 4, name: "local_track_published", kind: "message", T: LocalTrackPublished, oneof: "message" },
  { no: 5, name: "local_track_unpublished", kind: "message", T: LocalTrackUnpublished, oneof: "message" },
  { no: 6, name: "local_track_subscribed", kind: "message", T: LocalTrackSubscribed, oneof: "message" },
  { no: 7, name: "track_published", kind: "message", T: TrackPublished, oneof: "message" },
  { no: 8, name: "track_unpublished", kind: "message", T: TrackUnpublished, oneof: "message" },
  { no: 9, name: "track_subscribed", kind: "message", T: TrackSubscribed, oneof: "message" },
  { no: 10, name: "track_unsubscribed", kind: "message", T: TrackUnsubscribed, oneof: "message" },
  { no: 11, name: "track_subscription_failed", kind: "message", T: TrackSubscriptionFailed, oneof: "message" },
  { no: 12, name: "track_muted", kind: "message", T: TrackMuted, oneof: "message" },
  { no: 13, name: "track_unmuted", kind: "message", T: TrackUnmuted, oneof: "message" },
  { no: 14, name: "active_speakers_changed", kind: "message", T: ActiveSpeakersChanged, oneof: "message" },
  { no: 15, name: "room_metadata_changed", kind: "message", T: RoomMetadataChanged, oneof: "message" },
  { no: 16, name: "room_sid_changed", kind: "message", T: RoomSidChanged, oneof: "message" },
  { no: 17, name: "participant_metadata_changed", kind: "message", T: ParticipantMetadataChanged, oneof: "message" },
  { no: 18, name: "participant_name_changed", kind: "message", T: ParticipantNameChanged, oneof: "message" },
  { no: 19, name: "participant_attributes_changed", kind: "message", T: ParticipantAttributesChanged, oneof: "message" },
  { no: 20, name: "connection_quality_changed", kind: "message", T: ConnectionQualityChanged, oneof: "message" },
  { no: 21, name: "connection_state_changed", kind: "message", T: ConnectionStateChanged, oneof: "message" },
  { no: 22, name: "disconnected", kind: "message", T: Disconnected, oneof: "message" },
  { no: 23, name: "reconnecting", kind: "message", T: Reconnecting, oneof: "message" },
  { no: 24, name: "reconnected", kind: "message", T: Reconnected, oneof: "message" },
  { no: 25, name: "e2ee_state_changed", kind: "message", T: E2eeStateChanged, oneof: "message" },
  { no: 26, name: "eos", kind: "message", T: RoomEOS, oneof: "message" },
  { no: 27, name: "data_packet_received", kind: "message", T: DataPacketReceived, oneof: "message" },
  { no: 28, name: "transcription_received", kind: "message", T: TranscriptionReceived, oneof: "message" },
  { no: 29, name: "chat_message", kind: "message", T: ChatMessageReceived, oneof: "message" },
  { no: 30, name: "stream_header_received", kind: "message", T: DataStreamHeaderReceived, oneof: "message" },
  { no: 31, name: "stream_chunk_received", kind: "message", T: DataStreamChunkReceived, oneof: "message" },
  { no: 32, name: "stream_trailer_received", kind: "message", T: DataStreamTrailerReceived, oneof: "message" },
  { no: 33, name: "data_channel_low_threshold_changed", kind: "message", T: DataChannelBufferedAmountLowThresholdChanged, oneof: "message" }
]);
let RoomEvent = _RoomEvent;
const _RoomInfo = class _RoomInfo extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RoomInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RoomInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RoomInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_RoomInfo, a, b);
  }
};
_RoomInfo.runtime = proto2;
_RoomInfo.typeName = "livekit.proto.RoomInfo";
_RoomInfo.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "sid", kind: "scalar", T: 9, opt: true },
  { no: 2, name: "name", kind: "scalar", T: 9, req: true },
  { no: 3, name: "metadata", kind: "scalar", T: 9, req: true },
  { no: 4, name: "lossy_dc_buffered_amount_low_threshold", kind: "scalar", T: 4, req: true },
  { no: 5, name: "reliable_dc_buffered_amount_low_threshold", kind: "scalar", T: 4, req: true }
]);
let RoomInfo = _RoomInfo;
const _OwnedRoom = class _OwnedRoom extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _OwnedRoom().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _OwnedRoom().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _OwnedRoom().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_OwnedRoom, a, b);
  }
};
_OwnedRoom.runtime = proto2;
_OwnedRoom.typeName = "livekit.proto.OwnedRoom";
_OwnedRoom.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle, req: true },
  { no: 2, name: "info", kind: "message", T: RoomInfo, req: true }
]);
let OwnedRoom = _OwnedRoom;
const _ParticipantConnected = class _ParticipantConnected extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ParticipantConnected().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ParticipantConnected().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ParticipantConnected().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ParticipantConnected, a, b);
  }
};
_ParticipantConnected.runtime = proto2;
_ParticipantConnected.typeName = "livekit.proto.ParticipantConnected";
_ParticipantConnected.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "info", kind: "message", T: OwnedParticipant, req: true }
]);
let ParticipantConnected = _ParticipantConnected;
const _ParticipantDisconnected = class _ParticipantDisconnected extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ParticipantDisconnected().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ParticipantDisconnected().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ParticipantDisconnected().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ParticipantDisconnected, a, b);
  }
};
_ParticipantDisconnected.runtime = proto2;
_ParticipantDisconnected.typeName = "livekit.proto.ParticipantDisconnected";
_ParticipantDisconnected.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "disconnect_reason", kind: "enum", T: proto2.getEnumType(DisconnectReason), req: true }
]);
let ParticipantDisconnected = _ParticipantDisconnected;
const _LocalTrackPublished = class _LocalTrackPublished extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _LocalTrackPublished().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _LocalTrackPublished().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _LocalTrackPublished().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_LocalTrackPublished, a, b);
  }
};
_LocalTrackPublished.runtime = proto2;
_LocalTrackPublished.typeName = "livekit.proto.LocalTrackPublished";
_LocalTrackPublished.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "track_sid", kind: "scalar", T: 9, req: true }
]);
let LocalTrackPublished = _LocalTrackPublished;
const _LocalTrackUnpublished = class _LocalTrackUnpublished extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _LocalTrackUnpublished().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _LocalTrackUnpublished().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _LocalTrackUnpublished().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_LocalTrackUnpublished, a, b);
  }
};
_LocalTrackUnpublished.runtime = proto2;
_LocalTrackUnpublished.typeName = "livekit.proto.LocalTrackUnpublished";
_LocalTrackUnpublished.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "publication_sid", kind: "scalar", T: 9, req: true }
]);
let LocalTrackUnpublished = _LocalTrackUnpublished;
const _LocalTrackSubscribed = class _LocalTrackSubscribed extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _LocalTrackSubscribed().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _LocalTrackSubscribed().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _LocalTrackSubscribed().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_LocalTrackSubscribed, a, b);
  }
};
_LocalTrackSubscribed.runtime = proto2;
_LocalTrackSubscribed.typeName = "livekit.proto.LocalTrackSubscribed";
_LocalTrackSubscribed.fields = proto2.util.newFieldList(() => [
  { no: 2, name: "track_sid", kind: "scalar", T: 9, req: true }
]);
let LocalTrackSubscribed = _LocalTrackSubscribed;
const _TrackPublished = class _TrackPublished extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackPublished().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackPublished().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackPublished().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackPublished, a, b);
  }
};
_TrackPublished.runtime = proto2;
_TrackPublished.typeName = "livekit.proto.TrackPublished";
_TrackPublished.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "publication", kind: "message", T: OwnedTrackPublication, req: true }
]);
let TrackPublished = _TrackPublished;
const _TrackUnpublished = class _TrackUnpublished extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackUnpublished().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackUnpublished().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackUnpublished().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackUnpublished, a, b);
  }
};
_TrackUnpublished.runtime = proto2;
_TrackUnpublished.typeName = "livekit.proto.TrackUnpublished";
_TrackUnpublished.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "publication_sid", kind: "scalar", T: 9, req: true }
]);
let TrackUnpublished = _TrackUnpublished;
const _TrackSubscribed = class _TrackSubscribed extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackSubscribed().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackSubscribed().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackSubscribed().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackSubscribed, a, b);
  }
};
_TrackSubscribed.runtime = proto2;
_TrackSubscribed.typeName = "livekit.proto.TrackSubscribed";
_TrackSubscribed.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "track", kind: "message", T: OwnedTrack, req: true }
]);
let TrackSubscribed = _TrackSubscribed;
const _TrackUnsubscribed = class _TrackUnsubscribed extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackUnsubscribed().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackUnsubscribed().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackUnsubscribed().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackUnsubscribed, a, b);
  }
};
_TrackUnsubscribed.runtime = proto2;
_TrackUnsubscribed.typeName = "livekit.proto.TrackUnsubscribed";
_TrackUnsubscribed.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "track_sid", kind: "scalar", T: 9, req: true }
]);
let TrackUnsubscribed = _TrackUnsubscribed;
const _TrackSubscriptionFailed = class _TrackSubscriptionFailed extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackSubscriptionFailed().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackSubscriptionFailed().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackSubscriptionFailed().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackSubscriptionFailed, a, b);
  }
};
_TrackSubscriptionFailed.runtime = proto2;
_TrackSubscriptionFailed.typeName = "livekit.proto.TrackSubscriptionFailed";
_TrackSubscriptionFailed.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "track_sid", kind: "scalar", T: 9, req: true },
  { no: 3, name: "error", kind: "scalar", T: 9, req: true }
]);
let TrackSubscriptionFailed = _TrackSubscriptionFailed;
const _TrackMuted = class _TrackMuted extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackMuted().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackMuted().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackMuted().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackMuted, a, b);
  }
};
_TrackMuted.runtime = proto2;
_TrackMuted.typeName = "livekit.proto.TrackMuted";
_TrackMuted.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "track_sid", kind: "scalar", T: 9, req: true }
]);
let TrackMuted = _TrackMuted;
const _TrackUnmuted = class _TrackUnmuted extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TrackUnmuted().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TrackUnmuted().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TrackUnmuted().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TrackUnmuted, a, b);
  }
};
_TrackUnmuted.runtime = proto2;
_TrackUnmuted.typeName = "livekit.proto.TrackUnmuted";
_TrackUnmuted.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "track_sid", kind: "scalar", T: 9, req: true }
]);
let TrackUnmuted = _TrackUnmuted;
const _E2eeStateChanged = class _E2eeStateChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _E2eeStateChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _E2eeStateChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _E2eeStateChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_E2eeStateChanged, a, b);
  }
};
_E2eeStateChanged.runtime = proto2;
_E2eeStateChanged.typeName = "livekit.proto.E2eeStateChanged";
_E2eeStateChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "state", kind: "enum", T: proto2.getEnumType(EncryptionState), req: true }
]);
let E2eeStateChanged = _E2eeStateChanged;
const _ActiveSpeakersChanged = class _ActiveSpeakersChanged extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string participant_identities = 1;
     */
    this.participantIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ActiveSpeakersChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ActiveSpeakersChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ActiveSpeakersChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ActiveSpeakersChanged, a, b);
  }
};
_ActiveSpeakersChanged.runtime = proto2;
_ActiveSpeakersChanged.typeName = "livekit.proto.ActiveSpeakersChanged";
_ActiveSpeakersChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identities", kind: "scalar", T: 9, repeated: true }
]);
let ActiveSpeakersChanged = _ActiveSpeakersChanged;
const _RoomMetadataChanged = class _RoomMetadataChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RoomMetadataChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RoomMetadataChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RoomMetadataChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_RoomMetadataChanged, a, b);
  }
};
_RoomMetadataChanged.runtime = proto2;
_RoomMetadataChanged.typeName = "livekit.proto.RoomMetadataChanged";
_RoomMetadataChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "metadata", kind: "scalar", T: 9, req: true }
]);
let RoomMetadataChanged = _RoomMetadataChanged;
const _RoomSidChanged = class _RoomSidChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RoomSidChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RoomSidChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RoomSidChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_RoomSidChanged, a, b);
  }
};
_RoomSidChanged.runtime = proto2;
_RoomSidChanged.typeName = "livekit.proto.RoomSidChanged";
_RoomSidChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "sid", kind: "scalar", T: 9, req: true }
]);
let RoomSidChanged = _RoomSidChanged;
const _ParticipantMetadataChanged = class _ParticipantMetadataChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ParticipantMetadataChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ParticipantMetadataChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ParticipantMetadataChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ParticipantMetadataChanged, a, b);
  }
};
_ParticipantMetadataChanged.runtime = proto2;
_ParticipantMetadataChanged.typeName = "livekit.proto.ParticipantMetadataChanged";
_ParticipantMetadataChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "metadata", kind: "scalar", T: 9, req: true }
]);
let ParticipantMetadataChanged = _ParticipantMetadataChanged;
const _ParticipantAttributesChanged = class _ParticipantAttributesChanged extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated livekit.proto.AttributesEntry attributes = 2;
     */
    this.attributes = [];
    /**
     * @generated from field: repeated livekit.proto.AttributesEntry changed_attributes = 3;
     */
    this.changedAttributes = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ParticipantAttributesChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ParticipantAttributesChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ParticipantAttributesChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ParticipantAttributesChanged, a, b);
  }
};
_ParticipantAttributesChanged.runtime = proto2;
_ParticipantAttributesChanged.typeName = "livekit.proto.ParticipantAttributesChanged";
_ParticipantAttributesChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "attributes", kind: "message", T: AttributesEntry, repeated: true },
  { no: 3, name: "changed_attributes", kind: "message", T: AttributesEntry, repeated: true }
]);
let ParticipantAttributesChanged = _ParticipantAttributesChanged;
const _ParticipantNameChanged = class _ParticipantNameChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ParticipantNameChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ParticipantNameChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ParticipantNameChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ParticipantNameChanged, a, b);
  }
};
_ParticipantNameChanged.runtime = proto2;
_ParticipantNameChanged.typeName = "livekit.proto.ParticipantNameChanged";
_ParticipantNameChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "name", kind: "scalar", T: 9, req: true }
]);
let ParticipantNameChanged = _ParticipantNameChanged;
const _ConnectionQualityChanged = class _ConnectionQualityChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ConnectionQualityChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ConnectionQualityChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ConnectionQualityChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ConnectionQualityChanged, a, b);
  }
};
_ConnectionQualityChanged.runtime = proto2;
_ConnectionQualityChanged.typeName = "livekit.proto.ConnectionQualityChanged";
_ConnectionQualityChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "quality", kind: "enum", T: proto2.getEnumType(ConnectionQuality), req: true }
]);
let ConnectionQualityChanged = _ConnectionQualityChanged;
const _UserPacket = class _UserPacket extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _UserPacket().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _UserPacket().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _UserPacket().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_UserPacket, a, b);
  }
};
_UserPacket.runtime = proto2;
_UserPacket.typeName = "livekit.proto.UserPacket";
_UserPacket.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "data", kind: "message", T: OwnedBuffer, req: true },
  { no: 2, name: "topic", kind: "scalar", T: 9, opt: true }
]);
let UserPacket = _UserPacket;
const _ChatMessage = class _ChatMessage extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ChatMessage().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ChatMessage().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ChatMessage().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ChatMessage, a, b);
  }
};
_ChatMessage.runtime = proto2;
_ChatMessage.typeName = "livekit.proto.ChatMessage";
_ChatMessage.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "id", kind: "scalar", T: 9, req: true },
  { no: 2, name: "timestamp", kind: "scalar", T: 3, req: true },
  { no: 3, name: "message", kind: "scalar", T: 9, req: true },
  { no: 4, name: "edit_timestamp", kind: "scalar", T: 3, opt: true },
  { no: 5, name: "deleted", kind: "scalar", T: 8, opt: true },
  { no: 6, name: "generated", kind: "scalar", T: 8, opt: true }
]);
let ChatMessage = _ChatMessage;
const _ChatMessageReceived = class _ChatMessageReceived extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ChatMessageReceived().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ChatMessageReceived().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ChatMessageReceived().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ChatMessageReceived, a, b);
  }
};
_ChatMessageReceived.runtime = proto2;
_ChatMessageReceived.typeName = "livekit.proto.ChatMessageReceived";
_ChatMessageReceived.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "message", kind: "message", T: ChatMessage, req: true },
  { no: 2, name: "participant_identity", kind: "scalar", T: 9, req: true }
]);
let ChatMessageReceived = _ChatMessageReceived;
const _SipDTMF = class _SipDTMF extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SipDTMF().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SipDTMF().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SipDTMF().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SipDTMF, a, b);
  }
};
_SipDTMF.runtime = proto2;
_SipDTMF.typeName = "livekit.proto.SipDTMF";
_SipDTMF.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "code", kind: "scalar", T: 13, req: true },
  { no: 2, name: "digit", kind: "scalar", T: 9, opt: true }
]);
let SipDTMF = _SipDTMF;
const _DataPacketReceived = class _DataPacketReceived extends Message {
  constructor(data) {
    super();
    /**
     * @generated from oneof livekit.proto.DataPacketReceived.value
     */
    this.value = { case: void 0 };
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataPacketReceived().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataPacketReceived().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataPacketReceived().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataPacketReceived, a, b);
  }
};
_DataPacketReceived.runtime = proto2;
_DataPacketReceived.typeName = "livekit.proto.DataPacketReceived";
_DataPacketReceived.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "kind", kind: "enum", T: proto2.getEnumType(DataPacketKind), req: true },
  { no: 2, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 4, name: "user", kind: "message", T: UserPacket, oneof: "value" },
  { no: 5, name: "sip_dtmf", kind: "message", T: SipDTMF, oneof: "value" }
]);
let DataPacketReceived = _DataPacketReceived;
const _TranscriptionReceived = class _TranscriptionReceived extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 3;
     */
    this.segments = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _TranscriptionReceived().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _TranscriptionReceived().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _TranscriptionReceived().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_TranscriptionReceived, a, b);
  }
};
_TranscriptionReceived.runtime = proto2;
_TranscriptionReceived.typeName = "livekit.proto.TranscriptionReceived";
_TranscriptionReceived.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, opt: true },
  { no: 2, name: "track_sid", kind: "scalar", T: 9, opt: true },
  { no: 3, name: "segments", kind: "message", T: TranscriptionSegment, repeated: true }
]);
let TranscriptionReceived = _TranscriptionReceived;
const _ConnectionStateChanged = class _ConnectionStateChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _ConnectionStateChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _ConnectionStateChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _ConnectionStateChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_ConnectionStateChanged, a, b);
  }
};
_ConnectionStateChanged.runtime = proto2;
_ConnectionStateChanged.typeName = "livekit.proto.ConnectionStateChanged";
_ConnectionStateChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "state", kind: "enum", T: proto2.getEnumType(ConnectionState), req: true }
]);
let ConnectionStateChanged = _ConnectionStateChanged;
const _Connected = class _Connected extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _Connected().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _Connected().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _Connected().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_Connected, a, b);
  }
};
_Connected.runtime = proto2;
_Connected.typeName = "livekit.proto.Connected";
_Connected.fields = proto2.util.newFieldList(() => []);
let Connected = _Connected;
const _Disconnected = class _Disconnected extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _Disconnected().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _Disconnected().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _Disconnected().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_Disconnected, a, b);
  }
};
_Disconnected.runtime = proto2;
_Disconnected.typeName = "livekit.proto.Disconnected";
_Disconnected.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "reason", kind: "enum", T: proto2.getEnumType(DisconnectReason), req: true }
]);
let Disconnected = _Disconnected;
const _Reconnecting = class _Reconnecting extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _Reconnecting().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _Reconnecting().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _Reconnecting().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_Reconnecting, a, b);
  }
};
_Reconnecting.runtime = proto2;
_Reconnecting.typeName = "livekit.proto.Reconnecting";
_Reconnecting.fields = proto2.util.newFieldList(() => []);
let Reconnecting = _Reconnecting;
const _Reconnected = class _Reconnected extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _Reconnected().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _Reconnected().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _Reconnected().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_Reconnected, a, b);
  }
};
_Reconnected.runtime = proto2;
_Reconnected.typeName = "livekit.proto.Reconnected";
_Reconnected.fields = proto2.util.newFieldList(() => []);
let Reconnected = _Reconnected;
const _RoomEOS = class _RoomEOS extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _RoomEOS().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _RoomEOS().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _RoomEOS().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_RoomEOS, a, b);
  }
};
_RoomEOS.runtime = proto2;
_RoomEOS.typeName = "livekit.proto.RoomEOS";
_RoomEOS.fields = proto2.util.newFieldList(() => []);
let RoomEOS = _RoomEOS;
const _DataStream = class _DataStream extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStream().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStream().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStream().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStream, a, b);
  }
};
_DataStream.runtime = proto2;
_DataStream.typeName = "livekit.proto.DataStream";
_DataStream.fields = proto2.util.newFieldList(() => []);
let DataStream = _DataStream;
var DataStream_OperationType = /* @__PURE__ */ ((DataStream_OperationType2) => {
  DataStream_OperationType2[DataStream_OperationType2["CREATE"] = 0] = "CREATE";
  DataStream_OperationType2[DataStream_OperationType2["UPDATE"] = 1] = "UPDATE";
  DataStream_OperationType2[DataStream_OperationType2["DELETE"] = 2] = "DELETE";
  DataStream_OperationType2[DataStream_OperationType2["REACTION"] = 3] = "REACTION";
  return DataStream_OperationType2;
})(DataStream_OperationType || {});
proto2.util.setEnumType(DataStream_OperationType, "livekit.proto.DataStream.OperationType", [
  { no: 0, name: "CREATE" },
  { no: 1, name: "UPDATE" },
  { no: 2, name: "DELETE" },
  { no: 3, name: "REACTION" }
]);
const _DataStream_TextHeader = class _DataStream_TextHeader extends Message {
  constructor(data) {
    super();
    /**
     * file attachments for text streams
     *
     * @generated from field: repeated string attached_stream_ids = 4;
     */
    this.attachedStreamIds = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStream_TextHeader().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStream_TextHeader().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStream_TextHeader().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStream_TextHeader, a, b);
  }
};
_DataStream_TextHeader.runtime = proto2;
_DataStream_TextHeader.typeName = "livekit.proto.DataStream.TextHeader";
_DataStream_TextHeader.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "operation_type", kind: "enum", T: proto2.getEnumType(DataStream_OperationType), req: true },
  { no: 2, name: "version", kind: "scalar", T: 5, opt: true },
  { no: 3, name: "reply_to_stream_id", kind: "scalar", T: 9, opt: true },
  { no: 4, name: "attached_stream_ids", kind: "scalar", T: 9, repeated: true },
  { no: 5, name: "generated", kind: "scalar", T: 8, opt: true }
]);
let DataStream_TextHeader = _DataStream_TextHeader;
const _DataStream_ByteHeader = class _DataStream_ByteHeader extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStream_ByteHeader().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStream_ByteHeader().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStream_ByteHeader().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStream_ByteHeader, a, b);
  }
};
_DataStream_ByteHeader.runtime = proto2;
_DataStream_ByteHeader.typeName = "livekit.proto.DataStream.ByteHeader";
_DataStream_ByteHeader.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "name", kind: "scalar", T: 9, req: true }
]);
let DataStream_ByteHeader = _DataStream_ByteHeader;
const _DataStream_Header = class _DataStream_Header extends Message {
  constructor(data) {
    super();
    /**
     * user defined attributes map that can carry additional info
     *
     * @generated from field: map<string, string> attributes = 6;
     */
    this.attributes = {};
    /**
     * oneof to choose between specific header types
     *
     * @generated from oneof livekit.proto.DataStream.Header.content_header
     */
    this.contentHeader = { case: void 0 };
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStream_Header().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStream_Header().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStream_Header().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStream_Header, a, b);
  }
};
_DataStream_Header.runtime = proto2;
_DataStream_Header.typeName = "livekit.proto.DataStream.Header";
_DataStream_Header.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "stream_id", kind: "scalar", T: 9, req: true },
  { no: 2, name: "timestamp", kind: "scalar", T: 3, req: true },
  { no: 3, name: "mime_type", kind: "scalar", T: 9, req: true },
  { no: 4, name: "topic", kind: "scalar", T: 9, req: true },
  { no: 5, name: "total_length", kind: "scalar", T: 4, opt: true },
  { no: 6, name: "attributes", kind: "map", K: 9, V: {
    kind: "scalar",
    T: 9
    /* ScalarType.STRING */
  } },
  { no: 7, name: "text_header", kind: "message", T: DataStream_TextHeader, oneof: "content_header" },
  { no: 8, name: "byte_header", kind: "message", T: DataStream_ByteHeader, oneof: "content_header" }
]);
let DataStream_Header = _DataStream_Header;
const _DataStream_Chunk = class _DataStream_Chunk extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStream_Chunk().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStream_Chunk().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStream_Chunk().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStream_Chunk, a, b);
  }
};
_DataStream_Chunk.runtime = proto2;
_DataStream_Chunk.typeName = "livekit.proto.DataStream.Chunk";
_DataStream_Chunk.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "stream_id", kind: "scalar", T: 9, req: true },
  { no: 2, name: "chunk_index", kind: "scalar", T: 4, req: true },
  { no: 3, name: "content", kind: "scalar", T: 12, req: true },
  { no: 4, name: "version", kind: "scalar", T: 5, opt: true },
  { no: 5, name: "iv", kind: "scalar", T: 12, opt: true }
]);
let DataStream_Chunk = _DataStream_Chunk;
const _DataStream_Trailer = class _DataStream_Trailer extends Message {
  constructor(data) {
    super();
    /**
     * finalizing updates for the stream, can also include additional insights for errors or endTime for transcription
     *
     * @generated from field: map<string, string> attributes = 3;
     */
    this.attributes = {};
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStream_Trailer().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStream_Trailer().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStream_Trailer().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStream_Trailer, a, b);
  }
};
_DataStream_Trailer.runtime = proto2;
_DataStream_Trailer.typeName = "livekit.proto.DataStream.Trailer";
_DataStream_Trailer.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "stream_id", kind: "scalar", T: 9, req: true },
  { no: 2, name: "reason", kind: "scalar", T: 9, req: true },
  { no: 3, name: "attributes", kind: "map", K: 9, V: {
    kind: "scalar",
    T: 9
    /* ScalarType.STRING */
  } }
]);
let DataStream_Trailer = _DataStream_Trailer;
const _DataStreamHeaderReceived = class _DataStreamHeaderReceived extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStreamHeaderReceived().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStreamHeaderReceived().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStreamHeaderReceived().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStreamHeaderReceived, a, b);
  }
};
_DataStreamHeaderReceived.runtime = proto2;
_DataStreamHeaderReceived.typeName = "livekit.proto.DataStreamHeaderReceived";
_DataStreamHeaderReceived.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "header", kind: "message", T: DataStream_Header, req: true }
]);
let DataStreamHeaderReceived = _DataStreamHeaderReceived;
const _DataStreamChunkReceived = class _DataStreamChunkReceived extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStreamChunkReceived().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStreamChunkReceived().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStreamChunkReceived().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStreamChunkReceived, a, b);
  }
};
_DataStreamChunkReceived.runtime = proto2;
_DataStreamChunkReceived.typeName = "livekit.proto.DataStreamChunkReceived";
_DataStreamChunkReceived.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "chunk", kind: "message", T: DataStream_Chunk, req: true }
]);
let DataStreamChunkReceived = _DataStreamChunkReceived;
const _DataStreamTrailerReceived = class _DataStreamTrailerReceived extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataStreamTrailerReceived().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataStreamTrailerReceived().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataStreamTrailerReceived().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataStreamTrailerReceived, a, b);
  }
};
_DataStreamTrailerReceived.runtime = proto2;
_DataStreamTrailerReceived.typeName = "livekit.proto.DataStreamTrailerReceived";
_DataStreamTrailerReceived.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "participant_identity", kind: "scalar", T: 9, req: true },
  { no: 2, name: "trailer", kind: "message", T: DataStream_Trailer, req: true }
]);
let DataStreamTrailerReceived = _DataStreamTrailerReceived;
const _SendStreamHeaderRequest = class _SendStreamHeaderRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string destination_identities = 3;
     */
    this.destinationIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamHeaderRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamHeaderRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamHeaderRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamHeaderRequest, a, b);
  }
};
_SendStreamHeaderRequest.runtime = proto2;
_SendStreamHeaderRequest.typeName = "livekit.proto.SendStreamHeaderRequest";
_SendStreamHeaderRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "header", kind: "message", T: DataStream_Header, req: true },
  { no: 3, name: "destination_identities", kind: "scalar", T: 9, repeated: true },
  { no: 4, name: "sender_identity", kind: "scalar", T: 9, req: true }
]);
let SendStreamHeaderRequest = _SendStreamHeaderRequest;
const _SendStreamChunkRequest = class _SendStreamChunkRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string destination_identities = 3;
     */
    this.destinationIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamChunkRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamChunkRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamChunkRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamChunkRequest, a, b);
  }
};
_SendStreamChunkRequest.runtime = proto2;
_SendStreamChunkRequest.typeName = "livekit.proto.SendStreamChunkRequest";
_SendStreamChunkRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "chunk", kind: "message", T: DataStream_Chunk, req: true },
  { no: 3, name: "destination_identities", kind: "scalar", T: 9, repeated: true },
  { no: 4, name: "sender_identity", kind: "scalar", T: 9, req: true }
]);
let SendStreamChunkRequest = _SendStreamChunkRequest;
const _SendStreamTrailerRequest = class _SendStreamTrailerRequest extends Message {
  constructor(data) {
    super();
    /**
     * @generated from field: repeated string destination_identities = 3;
     */
    this.destinationIdentities = [];
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamTrailerRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamTrailerRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamTrailerRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamTrailerRequest, a, b);
  }
};
_SendStreamTrailerRequest.runtime = proto2;
_SendStreamTrailerRequest.typeName = "livekit.proto.SendStreamTrailerRequest";
_SendStreamTrailerRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "trailer", kind: "message", T: DataStream_Trailer, req: true },
  { no: 3, name: "destination_identities", kind: "scalar", T: 9, repeated: true },
  { no: 4, name: "sender_identity", kind: "scalar", T: 9, req: true }
]);
let SendStreamTrailerRequest = _SendStreamTrailerRequest;
const _SendStreamHeaderResponse = class _SendStreamHeaderResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamHeaderResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamHeaderResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamHeaderResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamHeaderResponse, a, b);
  }
};
_SendStreamHeaderResponse.runtime = proto2;
_SendStreamHeaderResponse.typeName = "livekit.proto.SendStreamHeaderResponse";
_SendStreamHeaderResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let SendStreamHeaderResponse = _SendStreamHeaderResponse;
const _SendStreamChunkResponse = class _SendStreamChunkResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamChunkResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamChunkResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamChunkResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamChunkResponse, a, b);
  }
};
_SendStreamChunkResponse.runtime = proto2;
_SendStreamChunkResponse.typeName = "livekit.proto.SendStreamChunkResponse";
_SendStreamChunkResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let SendStreamChunkResponse = _SendStreamChunkResponse;
const _SendStreamTrailerResponse = class _SendStreamTrailerResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamTrailerResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamTrailerResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamTrailerResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamTrailerResponse, a, b);
  }
};
_SendStreamTrailerResponse.runtime = proto2;
_SendStreamTrailerResponse.typeName = "livekit.proto.SendStreamTrailerResponse";
_SendStreamTrailerResponse.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true }
]);
let SendStreamTrailerResponse = _SendStreamTrailerResponse;
const _SendStreamHeaderCallback = class _SendStreamHeaderCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamHeaderCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamHeaderCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamHeaderCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamHeaderCallback, a, b);
  }
};
_SendStreamHeaderCallback.runtime = proto2;
_SendStreamHeaderCallback.typeName = "livekit.proto.SendStreamHeaderCallback";
_SendStreamHeaderCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let SendStreamHeaderCallback = _SendStreamHeaderCallback;
const _SendStreamChunkCallback = class _SendStreamChunkCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamChunkCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamChunkCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamChunkCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamChunkCallback, a, b);
  }
};
_SendStreamChunkCallback.runtime = proto2;
_SendStreamChunkCallback.typeName = "livekit.proto.SendStreamChunkCallback";
_SendStreamChunkCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let SendStreamChunkCallback = _SendStreamChunkCallback;
const _SendStreamTrailerCallback = class _SendStreamTrailerCallback extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SendStreamTrailerCallback().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SendStreamTrailerCallback().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SendStreamTrailerCallback().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SendStreamTrailerCallback, a, b);
  }
};
_SendStreamTrailerCallback.runtime = proto2;
_SendStreamTrailerCallback.typeName = "livekit.proto.SendStreamTrailerCallback";
_SendStreamTrailerCallback.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "async_id", kind: "scalar", T: 4, req: true },
  { no: 2, name: "error", kind: "scalar", T: 9, opt: true }
]);
let SendStreamTrailerCallback = _SendStreamTrailerCallback;
const _SetDataChannelBufferedAmountLowThresholdRequest = class _SetDataChannelBufferedAmountLowThresholdRequest extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetDataChannelBufferedAmountLowThresholdRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetDataChannelBufferedAmountLowThresholdRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetDataChannelBufferedAmountLowThresholdRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetDataChannelBufferedAmountLowThresholdRequest, a, b);
  }
};
_SetDataChannelBufferedAmountLowThresholdRequest.runtime = proto2;
_SetDataChannelBufferedAmountLowThresholdRequest.typeName = "livekit.proto.SetDataChannelBufferedAmountLowThresholdRequest";
_SetDataChannelBufferedAmountLowThresholdRequest.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "local_participant_handle", kind: "scalar", T: 4, req: true },
  { no: 2, name: "threshold", kind: "scalar", T: 4, req: true },
  { no: 3, name: "kind", kind: "enum", T: proto2.getEnumType(DataPacketKind), req: true }
]);
let SetDataChannelBufferedAmountLowThresholdRequest = _SetDataChannelBufferedAmountLowThresholdRequest;
const _SetDataChannelBufferedAmountLowThresholdResponse = class _SetDataChannelBufferedAmountLowThresholdResponse extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _SetDataChannelBufferedAmountLowThresholdResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _SetDataChannelBufferedAmountLowThresholdResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _SetDataChannelBufferedAmountLowThresholdResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_SetDataChannelBufferedAmountLowThresholdResponse, a, b);
  }
};
_SetDataChannelBufferedAmountLowThresholdResponse.runtime = proto2;
_SetDataChannelBufferedAmountLowThresholdResponse.typeName = "livekit.proto.SetDataChannelBufferedAmountLowThresholdResponse";
_SetDataChannelBufferedAmountLowThresholdResponse.fields = proto2.util.newFieldList(() => []);
let SetDataChannelBufferedAmountLowThresholdResponse = _SetDataChannelBufferedAmountLowThresholdResponse;
const _DataChannelBufferedAmountLowThresholdChanged = class _DataChannelBufferedAmountLowThresholdChanged extends Message {
  constructor(data) {
    super();
    proto2.util.initPartial(data, this);
  }
  static fromBinary(bytes, options) {
    return new _DataChannelBufferedAmountLowThresholdChanged().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new _DataChannelBufferedAmountLowThresholdChanged().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new _DataChannelBufferedAmountLowThresholdChanged().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto2.util.equals(_DataChannelBufferedAmountLowThresholdChanged, a, b);
  }
};
_DataChannelBufferedAmountLowThresholdChanged.runtime = proto2;
_DataChannelBufferedAmountLowThresholdChanged.typeName = "livekit.proto.DataChannelBufferedAmountLowThresholdChanged";
_DataChannelBufferedAmountLowThresholdChanged.fields = proto2.util.newFieldList(() => [
  { no: 1, name: "kind", kind: "enum", T: proto2.getEnumType(DataPacketKind), req: true },
  { no: 2, name: "threshold", kind: "scalar", T: 4, req: true }
]);
let DataChannelBufferedAmountLowThresholdChanged = _DataChannelBufferedAmountLowThresholdChanged;
export {
  ActiveSpeakersChanged,
  AttributesEntry,
  AudioEncoding,
  BufferInfo,
  ChatMessage,
  ChatMessageReceived,
  ConnectCallback,
  ConnectCallback_ParticipantWithTracks,
  ConnectCallback_Result,
  ConnectRequest,
  ConnectResponse,
  Connected,
  ConnectionQuality,
  ConnectionQualityChanged,
  ConnectionState,
  ConnectionStateChanged,
  ContinualGatheringPolicy,
  DataChannelBufferedAmountLowThresholdChanged,
  DataPacketKind,
  DataPacketReceived,
  DataStream,
  DataStreamChunkReceived,
  DataStreamHeaderReceived,
  DataStreamTrailerReceived,
  DataStream_ByteHeader,
  DataStream_Chunk,
  DataStream_Header,
  DataStream_OperationType,
  DataStream_TextHeader,
  DataStream_Trailer,
  DisconnectCallback,
  DisconnectRequest,
  DisconnectResponse,
  Disconnected,
  E2eeStateChanged,
  EditChatMessageRequest,
  GetSessionStatsCallback,
  GetSessionStatsCallback_Result,
  GetSessionStatsRequest,
  GetSessionStatsResponse,
  IceServer,
  IceTransportType,
  LocalTrackPublished,
  LocalTrackSubscribed,
  LocalTrackUnpublished,
  OwnedBuffer,
  OwnedRoom,
  ParticipantAttributesChanged,
  ParticipantConnected,
  ParticipantDisconnected,
  ParticipantMetadataChanged,
  ParticipantNameChanged,
  PublishDataCallback,
  PublishDataRequest,
  PublishDataResponse,
  PublishSipDtmfCallback,
  PublishSipDtmfRequest,
  PublishSipDtmfResponse,
  PublishTrackCallback,
  PublishTrackRequest,
  PublishTrackResponse,
  PublishTranscriptionCallback,
  PublishTranscriptionRequest,
  PublishTranscriptionResponse,
  Reconnected,
  Reconnecting,
  RoomEOS,
  RoomEvent,
  RoomInfo,
  RoomMetadataChanged,
  RoomOptions,
  RoomSidChanged,
  RtcConfig,
  SendChatMessageCallback,
  SendChatMessageRequest,
  SendChatMessageResponse,
  SendStreamChunkCallback,
  SendStreamChunkRequest,
  SendStreamChunkResponse,
  SendStreamHeaderCallback,
  SendStreamHeaderRequest,
  SendStreamHeaderResponse,
  SendStreamTrailerCallback,
  SendStreamTrailerRequest,
  SendStreamTrailerResponse,
  SetDataChannelBufferedAmountLowThresholdRequest,
  SetDataChannelBufferedAmountLowThresholdResponse,
  SetLocalAttributesCallback,
  SetLocalAttributesRequest,
  SetLocalAttributesResponse,
  SetLocalMetadataCallback,
  SetLocalMetadataRequest,
  SetLocalMetadataResponse,
  SetLocalNameCallback,
  SetLocalNameRequest,
  SetLocalNameResponse,
  SetSubscribedRequest,
  SetSubscribedResponse,
  SipDTMF,
  TrackMuted,
  TrackPublishOptions,
  TrackPublished,
  TrackSubscribed,
  TrackSubscriptionFailed,
  TrackUnmuted,
  TrackUnpublished,
  TrackUnsubscribed,
  TranscriptionReceived,
  TranscriptionSegment,
  UnpublishTrackCallback,
  UnpublishTrackRequest,
  UnpublishTrackResponse,
  UserPacket,
  VideoEncoding
};
//# sourceMappingURL=room_pb.js.map