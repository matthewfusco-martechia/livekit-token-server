"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stream_reader_exports = {};
__export(stream_reader_exports, {
  ByteStreamReader: () => ByteStreamReader,
  TextStreamReader: () => TextStreamReader
});
module.exports = __toCommonJS(stream_reader_exports);
var import_log = require("../log.cjs");
var import_utils = require("../utils.cjs");
class BaseStreamReader {
  get info() {
    return this._info;
  }
  constructor(info, stream, totalByteSize) {
    this.reader = stream;
    this.totalByteSize = totalByteSize;
    this._info = info;
    this.bytesReceived = 0;
  }
}
class ByteStreamReader extends BaseStreamReader {
  handleChunkReceived(chunk) {
    var _a;
    this.bytesReceived += chunk.content.byteLength;
    const currentProgress = this.totalByteSize ? this.bytesReceived / this.totalByteSize : void 0;
    (_a = this.onProgress) == null ? void 0 : _a.call(this, currentProgress);
  }
  [Symbol.asyncIterator]() {
    const reader = this.reader.getReader();
    return {
      next: async () => {
        try {
          const { done, value } = await reader.read();
          if (done) {
            return { done: true, value: void 0 };
          } else {
            this.handleChunkReceived(value);
            return { done: false, value: value.content };
          }
        } catch (error) {
          import_log.log.error("error processing stream update", error);
          return { done: true, value: void 0 };
        }
      },
      return() {
        reader.releaseLock();
        return { done: true, value: void 0 };
      }
    };
  }
  async readAll() {
    const chunks = /* @__PURE__ */ new Set();
    for await (const chunk of this) {
      chunks.add(chunk);
    }
    return Array.from(chunks);
  }
}
class TextStreamReader extends BaseStreamReader {
  /**
   * A TextStreamReader instance can be used as an AsyncIterator that returns the entire string
   * that has been received up to the current point in time.
   */
  constructor(info, stream, totalChunkCount) {
    super(info, stream, totalChunkCount);
    this.receivedChunks = /* @__PURE__ */ new Map();
  }
  handleChunkReceived(chunk) {
    var _a;
    const index = (0, import_utils.bigIntToNumber)(chunk.chunkIndex);
    const previousChunkAtIndex = this.receivedChunks.get(index);
    if (previousChunkAtIndex && previousChunkAtIndex.version > chunk.version) {
      return;
    }
    this.receivedChunks.set(index, chunk);
    const currentProgress = this.totalByteSize ? this.receivedChunks.size / this.totalByteSize : void 0;
    (_a = this.onProgress) == null ? void 0 : _a.call(this, currentProgress);
  }
  /**
   * Async iterator implementation to allow usage of `for await...of` syntax.
   * Yields structured chunks from the stream.
   *
   */
  [Symbol.asyncIterator]() {
    const reader = this.reader.getReader();
    const decoder = new TextDecoder();
    return {
      next: async () => {
        try {
          const { done, value } = await reader.read();
          if (done) {
            return { done: true, value: void 0 };
          } else {
            this.handleChunkReceived(value);
            return {
              done: false,
              value: decoder.decode(value.content)
            };
          }
        } catch (error) {
          import_log.log.error("error processing stream update", error);
          return { done: true, value: void 0 };
        }
      },
      return() {
        reader.releaseLock();
        return { done: true, value: void 0 };
      }
    };
  }
  async readAll() {
    let finalString = "";
    for await (const chunk of this) {
      finalString += chunk;
    }
    return finalString;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ByteStreamReader,
  TextStreamReader
});
//# sourceMappingURL=stream_reader.cjs.map