{"version":3,"sources":["../src/video_frame.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { FfiClient, FfiRequest } from './ffi_client.js';\nimport type { OwnedVideoBuffer, VideoConvertResponse } from './proto/video_frame_pb.js';\nimport {\n  VideoBufferInfo,\n  VideoBufferInfo_ComponentInfo,\n  VideoBufferType,\n} from './proto/video_frame_pb.js';\n\nexport class VideoFrame {\n  data: Uint8Array;\n  width: number;\n  height: number;\n  type: VideoBufferType;\n\n  constructor(data: Uint8Array, width: number, height: number, type: VideoBufferType) {\n    this.data = data;\n    this.width = width;\n    this.height = height;\n    this.type = type;\n  }\n\n  /** @internal */\n  get dataPtr(): bigint {\n    return FfiClient.instance.retrievePtr(new Uint8Array(this.data.buffer));\n  }\n\n  /** @internal */\n  protoInfo(): VideoBufferInfo {\n    const info = new VideoBufferInfo({\n      width: this.width,\n      height: this.height,\n      type: this.type,\n      dataPtr: this.dataPtr,\n    });\n\n    switch (this.type) {\n      case VideoBufferType.ARGB:\n      case VideoBufferType.RGBA:\n      case VideoBufferType.ABGR:\n      case VideoBufferType.BGRA:\n        info.stride = this.width * 4;\n        break;\n      case VideoBufferType.RGB24:\n        info.stride = this.width * 3;\n        break;\n      default:\n        info.stride = 0;\n    }\n\n    info.components.push(...getPlaneInfos(this.dataPtr, this.type, this.width, this.height));\n\n    return info;\n  }\n\n  /** @internal */\n  static fromOwnedInfo(owned: OwnedVideoBuffer): VideoFrame {\n    const info = owned.info!;\n    return new VideoFrame(\n      FfiClient.instance.copyBuffer(\n        info.dataPtr!,\n        getPlaneLength(info.type!, info.width!, info.height!),\n      ),\n      info.width!,\n      info.height!,\n      info.type!,\n    );\n  }\n\n  getPlane(planeNth: number): Uint8Array | void {\n    const planeInfos = getPlaneInfos(this.dataPtr, this.type, this.width, this.height);\n    if (planeNth >= planeInfos.length) return;\n\n    const planeInfo = planeInfos[planeNth]!;\n    return FfiClient.instance.copyBuffer(planeInfo.dataPtr!, planeInfo.size!);\n  }\n\n  convert(dstType: VideoBufferType, flipY = false): VideoFrame {\n    const req = new FfiRequest({\n      message: {\n        case: 'videoConvert',\n        value: {\n          flipY,\n          dstType,\n          buffer: this.protoInfo(),\n        },\n      },\n    });\n    const resp = FfiClient.instance.request<VideoConvertResponse>(req);\n\n    switch (resp.message.case) {\n      case 'buffer':\n        return VideoFrame.fromOwnedInfo(resp.message.value);\n      case 'error':\n      default:\n        throw resp.message.value;\n    }\n  }\n}\n\nconst getPlaneLength = (type: VideoBufferType, width: number, height: number): number => {\n  const chromaWidth = Math.trunc((width + 1) / 2);\n  const chromaHeight = Math.trunc((height + 1) / 2);\n  switch (type) {\n    case VideoBufferType.ARGB:\n    case VideoBufferType.RGBA:\n    case VideoBufferType.ABGR:\n    case VideoBufferType.BGRA:\n      return width * height * 4;\n    case VideoBufferType.RGB24:\n    case VideoBufferType.I444:\n      return width * height * 3;\n    case VideoBufferType.I420:\n      return width * height + chromaWidth * chromaHeight * 2;\n    case VideoBufferType.I420A:\n      return width * height * 2 + chromaWidth * chromaWidth * 2;\n    case VideoBufferType.I422:\n      return width * height + chromaWidth * height * 2;\n    case VideoBufferType.I010:\n      return width * height * 2 + chromaWidth * chromaHeight * 4;\n    case VideoBufferType.NV12:\n      return width * height + chromaWidth * chromaWidth * 2;\n  }\n};\n\nconst getPlaneInfos = (\n  dataPtr: bigint,\n  type: VideoBufferType,\n  width: number,\n  height: number,\n): VideoBufferInfo_ComponentInfo[] => {\n  const chromaWidth = Math.trunc((width + 1) / 2);\n  const chromaHeight = Math.trunc((height + 1) / 2);\n  switch (type) {\n    case VideoBufferType.I420: {\n      const y = new VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });\n      const u = new VideoBufferInfo_ComponentInfo({\n        dataPtr: y.dataPtr! + BigInt(y.size!),\n        stride: chromaWidth,\n        size: chromaWidth * chromaHeight,\n      });\n      const v = new VideoBufferInfo_ComponentInfo({\n        dataPtr: u.dataPtr! + BigInt(u.size!),\n        stride: chromaWidth,\n        size: chromaWidth * chromaHeight,\n      });\n      return [y, u, v];\n    }\n    case VideoBufferType.I420A: {\n      const y = new VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });\n      const u = new VideoBufferInfo_ComponentInfo({\n        dataPtr: y.dataPtr! + BigInt(y.size!),\n        stride: chromaWidth,\n        size: chromaWidth * chromaHeight,\n      });\n      const v = new VideoBufferInfo_ComponentInfo({\n        dataPtr: u.dataPtr! + BigInt(u.size!),\n        stride: chromaWidth,\n        size: chromaWidth * chromaHeight,\n      });\n      const a = new VideoBufferInfo_ComponentInfo({\n        dataPtr: v.dataPtr! + BigInt(v.size!),\n        stride: width,\n        size: width * height,\n      });\n      return [y, u, v, a];\n    }\n    case VideoBufferType.I422: {\n      const y = new VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });\n      const u = new VideoBufferInfo_ComponentInfo({\n        dataPtr: y.dataPtr! + BigInt(y.size!),\n        stride: chromaWidth,\n        size: chromaWidth * height,\n      });\n      const v = new VideoBufferInfo_ComponentInfo({\n        dataPtr: u.dataPtr! + BigInt(u.size!),\n        stride: chromaWidth,\n        size: chromaWidth * height,\n      });\n      return [y, u, v];\n    }\n    case VideoBufferType.I444: {\n      const y = new VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });\n      const u = new VideoBufferInfo_ComponentInfo({\n        dataPtr: y.dataPtr! + BigInt(y.size!),\n        stride: width,\n        size: width * height,\n      });\n      const v = new VideoBufferInfo_ComponentInfo({\n        dataPtr: u.dataPtr! + BigInt(u.size!),\n        stride: width,\n        size: width * height,\n      });\n      return [y, u, v];\n    }\n    case VideoBufferType.I010: {\n      const y = new VideoBufferInfo_ComponentInfo({\n        dataPtr,\n        stride: width * 2,\n        size: width * height * 2,\n      });\n      const u = new VideoBufferInfo_ComponentInfo({\n        dataPtr: y.dataPtr! + BigInt(y.size!),\n        stride: chromaWidth * 2,\n        size: chromaWidth * chromaHeight * 2,\n      });\n      const v = new VideoBufferInfo_ComponentInfo({\n        dataPtr: u.dataPtr! + BigInt(u.size!),\n        stride: chromaWidth * 2,\n        size: chromaWidth * chromaHeight * 2,\n      });\n      return [y, u, v];\n    }\n    case VideoBufferType.NV12: {\n      const y = new VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });\n      const uv = new VideoBufferInfo_ComponentInfo({\n        dataPtr: y.dataPtr! + BigInt(y.size!),\n        stride: chromaWidth * 2,\n        size: chromaWidth * chromaHeight * 2,\n      });\n      return [y, uv];\n    }\n    default:\n      return [];\n  }\n};\n"],"mappings":"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","names":[]}