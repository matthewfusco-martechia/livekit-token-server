"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var video_frame_exports = {};
__export(video_frame_exports, {
  VideoFrame: () => VideoFrame
});
module.exports = __toCommonJS(video_frame_exports);
var import_ffi_client = require("./ffi_client.cjs");
var import_video_frame_pb = require("./proto/video_frame_pb.cjs");
class VideoFrame {
  constructor(data, width, height, type) {
    this.data = data;
    this.width = width;
    this.height = height;
    this.type = type;
  }
  /** @internal */
  get dataPtr() {
    return import_ffi_client.FfiClient.instance.retrievePtr(new Uint8Array(this.data.buffer));
  }
  /** @internal */
  protoInfo() {
    const info = new import_video_frame_pb.VideoBufferInfo({
      width: this.width,
      height: this.height,
      type: this.type,
      dataPtr: this.dataPtr
    });
    switch (this.type) {
      case import_video_frame_pb.VideoBufferType.ARGB:
      case import_video_frame_pb.VideoBufferType.RGBA:
      case import_video_frame_pb.VideoBufferType.ABGR:
      case import_video_frame_pb.VideoBufferType.BGRA:
        info.stride = this.width * 4;
        break;
      case import_video_frame_pb.VideoBufferType.RGB24:
        info.stride = this.width * 3;
        break;
      default:
        info.stride = 0;
    }
    info.components.push(...getPlaneInfos(this.dataPtr, this.type, this.width, this.height));
    return info;
  }
  /** @internal */
  static fromOwnedInfo(owned) {
    const info = owned.info;
    return new VideoFrame(
      import_ffi_client.FfiClient.instance.copyBuffer(
        info.dataPtr,
        getPlaneLength(info.type, info.width, info.height)
      ),
      info.width,
      info.height,
      info.type
    );
  }
  getPlane(planeNth) {
    const planeInfos = getPlaneInfos(this.dataPtr, this.type, this.width, this.height);
    if (planeNth >= planeInfos.length) return;
    const planeInfo = planeInfos[planeNth];
    return import_ffi_client.FfiClient.instance.copyBuffer(planeInfo.dataPtr, planeInfo.size);
  }
  convert(dstType, flipY = false) {
    const req = new import_ffi_client.FfiRequest({
      message: {
        case: "videoConvert",
        value: {
          flipY,
          dstType,
          buffer: this.protoInfo()
        }
      }
    });
    const resp = import_ffi_client.FfiClient.instance.request(req);
    switch (resp.message.case) {
      case "buffer":
        return VideoFrame.fromOwnedInfo(resp.message.value);
      case "error":
      default:
        throw resp.message.value;
    }
  }
}
const getPlaneLength = (type, width, height) => {
  const chromaWidth = Math.trunc((width + 1) / 2);
  const chromaHeight = Math.trunc((height + 1) / 2);
  switch (type) {
    case import_video_frame_pb.VideoBufferType.ARGB:
    case import_video_frame_pb.VideoBufferType.RGBA:
    case import_video_frame_pb.VideoBufferType.ABGR:
    case import_video_frame_pb.VideoBufferType.BGRA:
      return width * height * 4;
    case import_video_frame_pb.VideoBufferType.RGB24:
    case import_video_frame_pb.VideoBufferType.I444:
      return width * height * 3;
    case import_video_frame_pb.VideoBufferType.I420:
      return width * height + chromaWidth * chromaHeight * 2;
    case import_video_frame_pb.VideoBufferType.I420A:
      return width * height * 2 + chromaWidth * chromaWidth * 2;
    case import_video_frame_pb.VideoBufferType.I422:
      return width * height + chromaWidth * height * 2;
    case import_video_frame_pb.VideoBufferType.I010:
      return width * height * 2 + chromaWidth * chromaHeight * 4;
    case import_video_frame_pb.VideoBufferType.NV12:
      return width * height + chromaWidth * chromaWidth * 2;
  }
};
const getPlaneInfos = (dataPtr, type, width, height) => {
  const chromaWidth = Math.trunc((width + 1) / 2);
  const chromaHeight = Math.trunc((height + 1) / 2);
  switch (type) {
    case import_video_frame_pb.VideoBufferType.I420: {
      const y = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });
      const u = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: y.dataPtr + BigInt(y.size),
        stride: chromaWidth,
        size: chromaWidth * chromaHeight
      });
      const v = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: u.dataPtr + BigInt(u.size),
        stride: chromaWidth,
        size: chromaWidth * chromaHeight
      });
      return [y, u, v];
    }
    case import_video_frame_pb.VideoBufferType.I420A: {
      const y = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });
      const u = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: y.dataPtr + BigInt(y.size),
        stride: chromaWidth,
        size: chromaWidth * chromaHeight
      });
      const v = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: u.dataPtr + BigInt(u.size),
        stride: chromaWidth,
        size: chromaWidth * chromaHeight
      });
      const a = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: v.dataPtr + BigInt(v.size),
        stride: width,
        size: width * height
      });
      return [y, u, v, a];
    }
    case import_video_frame_pb.VideoBufferType.I422: {
      const y = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });
      const u = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: y.dataPtr + BigInt(y.size),
        stride: chromaWidth,
        size: chromaWidth * height
      });
      const v = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: u.dataPtr + BigInt(u.size),
        stride: chromaWidth,
        size: chromaWidth * height
      });
      return [y, u, v];
    }
    case import_video_frame_pb.VideoBufferType.I444: {
      const y = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });
      const u = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: y.dataPtr + BigInt(y.size),
        stride: width,
        size: width * height
      });
      const v = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: u.dataPtr + BigInt(u.size),
        stride: width,
        size: width * height
      });
      return [y, u, v];
    }
    case import_video_frame_pb.VideoBufferType.I010: {
      const y = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr,
        stride: width * 2,
        size: width * height * 2
      });
      const u = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: y.dataPtr + BigInt(y.size),
        stride: chromaWidth * 2,
        size: chromaWidth * chromaHeight * 2
      });
      const v = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: u.dataPtr + BigInt(u.size),
        stride: chromaWidth * 2,
        size: chromaWidth * chromaHeight * 2
      });
      return [y, u, v];
    }
    case import_video_frame_pb.VideoBufferType.NV12: {
      const y = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({ dataPtr, stride: width, size: width * height });
      const uv = new import_video_frame_pb.VideoBufferInfo_ComponentInfo({
        dataPtr: y.dataPtr + BigInt(y.size),
        stride: chromaWidth * 2,
        size: chromaWidth * chromaHeight * 2
      });
      return [y, uv];
    }
    default:
      return [];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VideoFrame
});
//# sourceMappingURL=video_frame.cjs.map