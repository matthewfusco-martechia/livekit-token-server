"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var track_exports = {};
__export(track_exports, {
  LocalAudioTrack: () => LocalAudioTrack,
  LocalVideoTrack: () => LocalVideoTrack,
  RemoteAudioTrack: () => RemoteAudioTrack,
  RemoteVideoTrack: () => RemoteVideoTrack,
  Track: () => Track
});
module.exports = __toCommonJS(track_exports);
var import_ffi_client = require("./ffi_client.cjs");
var import_track_pb = require("./proto/track_pb.cjs");
class Track {
  constructor(owned) {
    this.info = owned.info;
    this.ffi_handle = new import_ffi_client.FfiHandle(owned.handle.id);
  }
  get sid() {
    var _a;
    return (_a = this.info) == null ? void 0 : _a.sid;
  }
  get name() {
    var _a;
    return (_a = this.info) == null ? void 0 : _a.name;
  }
  get kind() {
    var _a;
    return (_a = this.info) == null ? void 0 : _a.kind;
  }
  get stream_state() {
    var _a;
    return (_a = this.info) == null ? void 0 : _a.streamState;
  }
  get muted() {
    var _a;
    return (_a = this.info) == null ? void 0 : _a.muted;
  }
}
class LocalAudioTrack extends Track {
  constructor(owned) {
    super(owned);
  }
  static createAudioTrack(name, source) {
    const req = new import_track_pb.CreateAudioTrackRequest({
      name,
      sourceHandle: source.ffiHandle.handle
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: { case: "createAudioTrack", value: req }
    });
    return new LocalAudioTrack(res.track);
  }
}
class LocalVideoTrack extends Track {
  constructor(owned) {
    super(owned);
  }
  static createVideoTrack(name, source) {
    const req = new import_track_pb.CreateVideoTrackRequest({
      name,
      sourceHandle: source.ffiHandle.handle
    });
    const res = import_ffi_client.FfiClient.instance.request({
      message: { case: "createVideoTrack", value: req }
    });
    return new LocalVideoTrack(res.track);
  }
}
class RemoteVideoTrack extends Track {
  constructor(owned) {
    super(owned);
  }
}
class RemoteAudioTrack extends Track {
  constructor(owned) {
    super(owned);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LocalAudioTrack,
  LocalVideoTrack,
  RemoteAudioTrack,
  RemoteVideoTrack,
  Track
});
//# sourceMappingURL=track.cjs.map