"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  cli: () => cli,
  ipc: () => ipc,
  llm: () => llm,
  metrics: () => metrics,
  multimodal: () => multimodal,
  pipeline: () => pipeline,
  stt: () => stt,
  tokenize: () => tokenize,
  tts: () => tts
});
module.exports = __toCommonJS(src_exports);
var cli = __toESM(require("./cli.cjs"), 1);
var ipc = __toESM(require("./ipc/index.cjs"), 1);
var llm = __toESM(require("./llm/index.cjs"), 1);
var metrics = __toESM(require("./metrics/index.cjs"), 1);
var multimodal = __toESM(require("./multimodal/index.cjs"), 1);
var pipeline = __toESM(require("./pipeline/index.cjs"), 1);
var stt = __toESM(require("./stt/index.cjs"), 1);
var tokenize = __toESM(require("./tokenize/index.cjs"), 1);
var tts = __toESM(require("./tts/index.cjs"), 1);
__reExport(src_exports, require("./vad.cjs"), module.exports);
__reExport(src_exports, require("./plugin.cjs"), module.exports);
__reExport(src_exports, require("./version.cjs"), module.exports);
__reExport(src_exports, require("./job.cjs"), module.exports);
__reExport(src_exports, require("./worker.cjs"), module.exports);
__reExport(src_exports, require("./utils.cjs"), module.exports);
__reExport(src_exports, require("./log.cjs"), module.exports);
__reExport(src_exports, require("./generator.cjs"), module.exports);
__reExport(src_exports, require("./audio.cjs"), module.exports);
__reExport(src_exports, require("./transcription.cjs"), module.exports);
__reExport(src_exports, require("./inference_runner.cjs"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cli,
  ipc,
  llm,
  metrics,
  multimodal,
  pipeline,
  stt,
  tokenize,
  tts,
  ...require("./vad.cjs"),
  ...require("./plugin.cjs"),
  ...require("./version.cjs"),
  ...require("./job.cjs"),
  ...require("./worker.cjs"),
  ...require("./utils.cjs"),
  ...require("./log.cjs"),
  ...require("./generator.cjs"),
  ...require("./audio.cjs"),
  ...require("./transcription.cjs"),
  ...require("./inference_runner.cjs")
});
//# sourceMappingURL=index.cjs.map