{"version":3,"sources":["../src/audio.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { AudioFrame } from '@livekit/rtc-node';\nimport { log } from './log.js';\n\n/** AudioByteStream translates between LiveKit AudioFrame packets and raw byte data. */\nexport class AudioByteStream {\n  #sampleRate: number;\n  #numChannels: number;\n  #bytesPerFrame: number;\n  #buf: Int8Array;\n  #logger = log();\n\n  constructor(sampleRate: number, numChannels: number, samplesPerChannel: number | null = null) {\n    this.#sampleRate = sampleRate;\n    this.#numChannels = numChannels;\n\n    if (samplesPerChannel === null) {\n      samplesPerChannel = Math.floor(sampleRate / 50); // 20ms by default\n    }\n\n    this.#bytesPerFrame = numChannels * samplesPerChannel * 2; // 2 bytes per sample (Int16)\n    this.#buf = new Int8Array();\n  }\n\n  write(data: ArrayBuffer): AudioFrame[] {\n    this.#buf = new Int8Array([...this.#buf, ...new Int8Array(data)]);\n\n    const frames: AudioFrame[] = [];\n    while (this.#buf.length >= this.#bytesPerFrame) {\n      const frameData = this.#buf.slice(0, this.#bytesPerFrame);\n      this.#buf = this.#buf.slice(this.#bytesPerFrame);\n\n      frames.push(\n        new AudioFrame(\n          new Int16Array(frameData.buffer),\n          this.#sampleRate,\n          this.#numChannels,\n          frameData.length / 2,\n        ),\n      );\n    }\n\n    return frames;\n  }\n\n  flush(): AudioFrame[] {\n    if (this.#buf.length % (2 * this.#numChannels) !== 0) {\n      this.#logger.warn('AudioByteStream: incomplete frame during flush, dropping');\n      return [];\n    }\n\n    return [\n      new AudioFrame(\n        new Int16Array(this.#buf.buffer),\n        this.#sampleRate,\n        this.#numChannels,\n        this.#buf.length / 2,\n      ),\n    ];\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,sBAA2B;AAC3B,iBAAoB;AAGb,MAAM,gBAAgB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAU,gBAAI;AAAA,EAEd,YAAY,YAAoB,aAAqB,oBAAmC,MAAM;AAC5F,SAAK,cAAc;AACnB,SAAK,eAAe;AAEpB,QAAI,sBAAsB,MAAM;AAC9B,0BAAoB,KAAK,MAAM,aAAa,EAAE;AAAA,IAChD;AAEA,SAAK,iBAAiB,cAAc,oBAAoB;AACxD,SAAK,OAAO,IAAI,UAAU;AAAA,EAC5B;AAAA,EAEA,MAAM,MAAiC;AACrC,SAAK,OAAO,IAAI,UAAU,CAAC,GAAG,KAAK,MAAM,GAAG,IAAI,UAAU,IAAI,CAAC,CAAC;AAEhE,UAAM,SAAuB,CAAC;AAC9B,WAAO,KAAK,KAAK,UAAU,KAAK,gBAAgB;AAC9C,YAAM,YAAY,KAAK,KAAK,MAAM,GAAG,KAAK,cAAc;AACxD,WAAK,OAAO,KAAK,KAAK,MAAM,KAAK,cAAc;AAE/C,aAAO;AAAA,QACL,IAAI;AAAA,UACF,IAAI,WAAW,UAAU,MAAM;AAAA,UAC/B,KAAK;AAAA,UACL,KAAK;AAAA,UACL,UAAU,SAAS;AAAA,QACrB;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,QAAsB;AACpB,QAAI,KAAK,KAAK,UAAU,IAAI,KAAK,kBAAkB,GAAG;AACpD,WAAK,QAAQ,KAAK,0DAA0D;AAC5E,aAAO,CAAC;AAAA,IACV;AAEA,WAAO;AAAA,MACL,IAAI;AAAA,QACF,IAAI,WAAW,KAAK,KAAK,MAAM;AAAA,QAC/B,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK,KAAK,SAAS;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AACF;","names":[]}