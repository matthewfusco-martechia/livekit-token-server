{"version":3,"sources":["../../src/llm/function_context.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { z } from 'zod';\n\n// heavily inspired by Vercel AI's `tool()`:\n// https://github.com/vercel/ai/blob/3b0983b/packages/ai/core/tool/tool.ts\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** Type reinforcement for the callable function's execute parameters. */\nexport type inferParameters<P extends z.ZodTypeAny> = z.infer<P>;\n\n/** Raw OpenAI-adherent function parameters. */\nexport type OpenAIFunctionParameters = {\n  type: 'object';\n  properties: { [id: string]: any };\n  required: string[];\n  additionalProperties: boolean;\n};\n\n/** A definition for a function callable by the LLM. */\nexport interface CallableFunction<P extends z.ZodTypeAny = any, R = any> {\n  description: string;\n  parameters: OpenAIFunctionParameters | P;\n  execute: (args: inferParameters<P>) => PromiseLike<R>;\n}\n\n/** A function that has been called but is not yet running */\nexport interface FunctionCallInfo<P extends z.ZodTypeAny = any, R = any> {\n  name: string;\n  func: CallableFunction<P, R>;\n  toolCallId: string;\n  rawParams: string;\n  params: inferParameters<P>;\n  task?: PromiseLike<CallableFunctionResult>;\n}\n\n/** The result of a ran FunctionCallInfo. */\nexport interface CallableFunctionResult {\n  name: string;\n  toolCallId: string;\n  result?: any;\n  error?: any;\n}\n\n/** An object containing callable functions and their names */\nexport type FunctionContext = {\n  [name: string]: CallableFunction;\n};\n\n// XXX: Zod is victim to the dual-package hazard. this is a hacky sorta-fix\n// until Zod v4.0.0 is released.\n// https://github.com/colinhacks/zod/issues/2241#issuecomment-2142688925\nconst looksLikeInstanceof = <T>(value: unknown, target: new (...args: any[]) => T): value is T => {\n  let current = value?.constructor;\n  do {\n    if (current?.name === target.name) return true;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    current = Object.getPrototypeOf(current) as Function;\n  } while (current?.name);\n  return false;\n};\n\n/** @internal */\nexport const oaiParams = (p: z.AnyZodObject) => {\n  const properties: Record<string, any> = {};\n  const requiredProperties: string[] = [];\n\n  const processZodType = (field: z.ZodTypeAny): any => {\n    const isOptional = field instanceof z.ZodOptional;\n    const nestedField = isOptional ? field._def.innerType : field;\n    const description = field._def.description;\n\n    if (looksLikeInstanceof(nestedField, z.ZodEnum)) {\n      return {\n        type: typeof nestedField._def.values[0],\n        ...(description && { description }),\n        enum: nestedField._def.values,\n      };\n    } else if (looksLikeInstanceof(nestedField, z.ZodArray)) {\n      const elementType = nestedField._def.type;\n      return {\n        type: 'array',\n        ...(description && { description }),\n        items: processZodType(elementType),\n      };\n    } else if (looksLikeInstanceof(nestedField, z.ZodObject)) {\n      const { properties, required } = oaiParams(nestedField);\n      return {\n        type: 'object',\n        ...(description && { description }),\n        properties,\n        required,\n      };\n    } else {\n      let type = nestedField._def.typeName.toLowerCase();\n      type = type.includes('zod') ? type.substring(3) : type;\n      return {\n        type,\n        ...(description && { description }),\n      };\n    }\n  };\n\n  for (const key in p.shape) {\n    const field = p.shape[key];\n    properties[key] = processZodType(field);\n\n    if (!(field instanceof z.ZodOptional)) {\n      requiredProperties.push(key);\n    }\n  }\n\n  const type = 'object' as const;\n  return {\n    type,\n    properties,\n    required: requiredProperties,\n  };\n};\n\n/** @internal */\nexport const oaiBuildFunctionInfo = (\n  fncCtx: FunctionContext,\n  toolCallId: string,\n  fncName: string,\n  rawArgs: string,\n): FunctionCallInfo => {\n  const func = fncCtx[fncName];\n  if (!func) {\n    throw new Error(`AI function ${fncName} not found`);\n  }\n\n  return {\n    name: fncName,\n    func,\n    toolCallId,\n    rawParams: rawArgs,\n    params: JSON.parse(rawArgs),\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAkB;AAmDlB,MAAM,sBAAsB,CAAI,OAAgB,WAAkD;AAChG,MAAI,UAAU,+BAAO;AACrB,KAAG;AACD,SAAI,mCAAS,UAAS,OAAO,KAAM,QAAO;AAE1C,cAAU,OAAO,eAAe,OAAO;AAAA,EACzC,SAAS,mCAAS;AAClB,SAAO;AACT;AAGO,MAAM,YAAY,CAAC,MAAsB;AAC9C,QAAM,aAAkC,CAAC;AACzC,QAAM,qBAA+B,CAAC;AAEtC,QAAM,iBAAiB,CAAC,UAA6B;AACnD,UAAM,aAAa,iBAAiB,aAAE;AACtC,UAAM,cAAc,aAAa,MAAM,KAAK,YAAY;AACxD,UAAM,cAAc,MAAM,KAAK;AAE/B,QAAI,oBAAoB,aAAa,aAAE,OAAO,GAAG;AAC/C,aAAO;AAAA,QACL,MAAM,OAAO,YAAY,KAAK,OAAO,CAAC;AAAA,QACtC,GAAI,eAAe,EAAE,YAAY;AAAA,QACjC,MAAM,YAAY,KAAK;AAAA,MACzB;AAAA,IACF,WAAW,oBAAoB,aAAa,aAAE,QAAQ,GAAG;AACvD,YAAM,cAAc,YAAY,KAAK;AACrC,aAAO;AAAA,QACL,MAAM;AAAA,QACN,GAAI,eAAe,EAAE,YAAY;AAAA,QACjC,OAAO,eAAe,WAAW;AAAA,MACnC;AAAA,IACF,WAAW,oBAAoB,aAAa,aAAE,SAAS,GAAG;AACxD,YAAM,EAAE,YAAAA,aAAY,SAAS,IAAI,UAAU,WAAW;AACtD,aAAO;AAAA,QACL,MAAM;AAAA,QACN,GAAI,eAAe,EAAE,YAAY;AAAA,QACjC,YAAAA;AAAA,QACA;AAAA,MACF;AAAA,IACF,OAAO;AACL,UAAIC,QAAO,YAAY,KAAK,SAAS,YAAY;AACjD,MAAAA,QAAOA,MAAK,SAAS,KAAK,IAAIA,MAAK,UAAU,CAAC,IAAIA;AAClD,aAAO;AAAA,QACL,MAAAA;AAAA,QACA,GAAI,eAAe,EAAE,YAAY;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AAEA,aAAW,OAAO,EAAE,OAAO;AACzB,UAAM,QAAQ,EAAE,MAAM,GAAG;AACzB,eAAW,GAAG,IAAI,eAAe,KAAK;AAEtC,QAAI,EAAE,iBAAiB,aAAE,cAAc;AACrC,yBAAmB,KAAK,GAAG;AAAA,IAC7B;AAAA,EACF;AAEA,QAAM,OAAO;AACb,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AAGO,MAAM,uBAAuB,CAClC,QACA,YACA,SACA,YACqB;AACrB,QAAM,OAAO,OAAO,OAAO;AAC3B,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,eAAe,OAAO,YAAY;AAAA,EACpD;AAEA,SAAO;AAAA,IACL,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX,QAAQ,KAAK,MAAM,OAAO;AAAA,EAC5B;AACF;","names":["properties","type"]}