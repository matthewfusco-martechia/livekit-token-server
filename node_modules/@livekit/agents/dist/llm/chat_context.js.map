{"version":3,"sources":["../../src/llm/chat_context.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { AudioFrame, VideoFrame } from '@livekit/rtc-node';\nimport type { CallableFunctionResult, FunctionCallInfo } from './function_context.js';\n\nexport enum ChatRole {\n  SYSTEM,\n  USER,\n  ASSISTANT,\n  TOOL,\n}\n\nexport interface ChatImage {\n  image: string | VideoFrame;\n  inferenceWidth?: number;\n  inferenceHeight?: number;\n  /**\n   * @internal\n   * Used by LLM implementations to store a processed version of the image for later use.\n   */\n  cache: { [id: string | number | symbol]: any };\n}\n\nexport interface ChatAudio {\n  frame: AudioFrame | AudioFrame[];\n}\n\nexport type ChatContent = string | ChatImage | ChatAudio;\n\nconst defaultCreateChatMessage = {\n  text: '',\n  images: [],\n  role: ChatRole.SYSTEM,\n};\n\nexport class ChatMessage {\n  readonly role: ChatRole;\n  readonly id?: string;\n  readonly name?: string;\n  readonly content?: ChatContent | ChatContent[];\n  readonly toolCalls?: FunctionCallInfo[];\n  readonly toolCallId?: string;\n  readonly toolException?: Error;\n\n  /** @internal */\n  constructor({\n    role,\n    id,\n    name,\n    content,\n    toolCalls,\n    toolCallId,\n    toolException,\n  }: {\n    role: ChatRole;\n    id?: string;\n    name?: string;\n    content?: ChatContent | ChatContent[];\n    toolCalls?: FunctionCallInfo[];\n    toolCallId?: string;\n    toolException?: Error;\n  }) {\n    this.role = role;\n    this.id = id;\n    this.name = name;\n    this.content = content;\n    this.toolCalls = toolCalls;\n    this.toolCallId = toolCallId;\n    this.toolException = toolException;\n  }\n\n  static createToolFromFunctionResult(func: CallableFunctionResult): ChatMessage {\n    if (!func.result && !func.error) {\n      throw new TypeError('CallableFunctionResult must include result or error');\n    }\n\n    return new ChatMessage({\n      role: ChatRole.TOOL,\n      name: func.name,\n      content: func.result || `Error: ${func.error}`,\n      toolCallId: func.toolCallId,\n      toolException: func.error,\n    });\n  }\n\n  static createToolCalls(toolCalls: FunctionCallInfo[], text = '') {\n    return new ChatMessage({\n      role: ChatRole.ASSISTANT,\n      toolCalls,\n      content: text,\n    });\n  }\n\n  static create(\n    options: Partial<{\n      text?: string;\n      images: ChatImage[];\n      role: ChatRole;\n    }>,\n  ): ChatMessage {\n    const { text, images, role } = { ...defaultCreateChatMessage, ...options };\n\n    if (!images.length) {\n      return new ChatMessage({\n        role,\n        content: text,\n      });\n    } else {\n      return new ChatMessage({\n        role,\n        content: [...(text ? [text] : []), ...images],\n      });\n    }\n  }\n\n  /** Returns a structured clone of this message. */\n  copy(): ChatMessage {\n    return new ChatMessage({\n      role: this.role,\n      id: this.id,\n      name: this.name,\n      content: this.content,\n      toolCalls: this.toolCalls,\n      toolCallId: this.toolCallId,\n      toolException: this.toolException,\n    });\n  }\n}\n\nexport class ChatContext {\n  messages: ChatMessage[] = [];\n  metadata: { [id: string]: any } = {};\n\n  append(msg: { text?: string; images?: ChatImage[]; role: ChatRole }): ChatContext {\n    this.messages.push(ChatMessage.create(msg));\n    return this;\n  }\n\n  /** Returns a structured clone of this context. */\n  copy(): ChatContext {\n    const ctx = new ChatContext();\n    ctx.messages.push(...this.messages.map((msg) => msg.copy()));\n    ctx.metadata = structuredClone(this.metadata);\n    return ctx;\n  }\n}\n"],"mappings":"AAMO,IAAK,WAAL,kBAAKA,cAAL;AACL,EAAAA,oBAAA;AACA,EAAAA,oBAAA;AACA,EAAAA,oBAAA;AACA,EAAAA,oBAAA;AAJU,SAAAA;AAAA,GAAA;AAwBZ,MAAM,2BAA2B;AAAA,EAC/B,MAAM;AAAA,EACN,QAAQ,CAAC;AAAA,EACT,MAAM;AACR;AAEO,MAAM,YAAY;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGT,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAQG;AACD,SAAK,OAAO;AACZ,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEA,OAAO,6BAA6B,MAA2C;AAC7E,QAAI,CAAC,KAAK,UAAU,CAAC,KAAK,OAAO;AAC/B,YAAM,IAAI,UAAU,qDAAqD;AAAA,IAC3E;AAEA,WAAO,IAAI,YAAY;AAAA,MACrB,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,MACX,SAAS,KAAK,UAAU,UAAU,KAAK,KAAK;AAAA,MAC5C,YAAY,KAAK;AAAA,MACjB,eAAe,KAAK;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEA,OAAO,gBAAgB,WAA+B,OAAO,IAAI;AAC/D,WAAO,IAAI,YAAY;AAAA,MACrB,MAAM;AAAA,MACN;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EAEA,OAAO,OACL,SAKa;AACb,UAAM,EAAE,MAAM,QAAQ,KAAK,IAAI,EAAE,GAAG,0BAA0B,GAAG,QAAQ;AAEzE,QAAI,CAAC,OAAO,QAAQ;AAClB,aAAO,IAAI,YAAY;AAAA,QACrB;AAAA,QACA,SAAS;AAAA,MACX,CAAC;AAAA,IACH,OAAO;AACL,aAAO,IAAI,YAAY;AAAA,QACrB;AAAA,QACA,SAAS,CAAC,GAAI,OAAO,CAAC,IAAI,IAAI,CAAC,GAAI,GAAG,MAAM;AAAA,MAC9C,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA,EAGA,OAAoB;AAClB,WAAO,IAAI,YAAY;AAAA,MACrB,MAAM,KAAK;AAAA,MACX,IAAI,KAAK;AAAA,MACT,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,MACd,WAAW,KAAK;AAAA,MAChB,YAAY,KAAK;AAAA,MACjB,eAAe,KAAK;AAAA,IACtB,CAAC;AAAA,EACH;AACF;AAEO,MAAM,YAAY;AAAA,EACvB,WAA0B,CAAC;AAAA,EAC3B,WAAkC,CAAC;AAAA,EAEnC,OAAO,KAA2E;AAChF,SAAK,SAAS,KAAK,YAAY,OAAO,GAAG,CAAC;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,OAAoB;AAClB,UAAM,MAAM,IAAI,YAAY;AAC5B,QAAI,SAAS,KAAK,GAAG,KAAK,SAAS,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC;AAC3D,QAAI,WAAW,gBAAgB,KAAK,QAAQ;AAC5C,WAAO;AAAA,EACT;AACF;","names":["ChatRole"]}