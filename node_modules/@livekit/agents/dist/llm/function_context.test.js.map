{"version":3,"sources":["../../src/llm/function_context.test.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { describe, expect, it } from 'vitest';\nimport { z } from 'zod';\nimport type { CallableFunction } from './function_context.js';\nimport { oaiParams } from './function_context.js';\n\ndescribe('function_context', () => {\n  describe('oaiParams', () => {\n    it('should handle basic object schema', () => {\n      const schema = z.object({\n        name: z.string().describe('The user name'),\n        age: z.number().describe('The user age'),\n      });\n\n      const result = oaiParams(schema);\n\n      expect(result).toEqual({\n        type: 'object',\n        properties: {\n          name: {\n            type: 'string',\n            description: 'The user name',\n          },\n          age: {\n            type: 'number',\n            description: 'The user age',\n          },\n        },\n        required: ['name', 'age'],\n      });\n    });\n\n    it('should handle enum fields', () => {\n      const schema = z.object({\n        color: z.enum(['red', 'blue', 'green']).describe('Choose a color'),\n      });\n\n      const result = oaiParams(schema);\n\n      expect(result).toEqual({\n        type: 'object',\n        properties: {\n          color: {\n            type: 'string',\n            description: 'Choose a color',\n            enum: ['red', 'blue', 'green'],\n          },\n        },\n        required: ['color'],\n      });\n    });\n\n    it('should handle array fields', () => {\n      const schema = z.object({\n        tags: z.array(z.string()).describe('List of tags'),\n      });\n\n      const result = oaiParams(schema);\n\n      expect(result).toEqual({\n        type: 'object',\n        properties: {\n          tags: {\n            type: 'array',\n            description: 'List of tags',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n        required: ['tags'],\n      });\n    });\n\n    it('should handle array of enums', () => {\n      const schema = z.object({\n        colors: z.array(z.enum(['red', 'blue', 'green'])).describe('List of colors'),\n      });\n\n      const result = oaiParams(schema);\n\n      expect(result).toEqual({\n        type: 'object',\n        properties: {\n          colors: {\n            type: 'array',\n            description: 'List of colors',\n            items: {\n              type: 'string',\n              enum: ['red', 'blue', 'green'],\n            },\n          },\n        },\n        required: ['colors'],\n      });\n    });\n\n    it('should handle optional fields', () => {\n      const schema = z.object({\n        name: z.string().describe('The user name'),\n        age: z.number().optional().describe('The user age'),\n      });\n\n      const result = oaiParams(schema);\n\n      expect(result).toEqual({\n        type: 'object',\n        properties: {\n          name: {\n            type: 'string',\n            description: 'The user name',\n          },\n          age: {\n            type: 'number',\n            description: 'The user age',\n          },\n        },\n        required: ['name'], // age should not be required\n      });\n    });\n\n    it('should handle fields without descriptions', () => {\n      const schema = z.object({\n        name: z.string(),\n        age: z.number(),\n      });\n\n      const result = oaiParams(schema);\n\n      expect(result).toEqual({\n        type: 'object',\n        properties: {\n          name: {\n            type: 'string',\n            description: undefined,\n          },\n          age: {\n            type: 'number',\n            description: undefined,\n          },\n        },\n        required: ['name', 'age'],\n      });\n    });\n  });\n\n  describe('CallableFunction type', () => {\n    it('should properly type a callable function', async () => {\n      const schema = z.object({\n        name: z.string().describe('The user name'),\n        age: z.number().describe('The user age'),\n      });\n\n      const testFunction: CallableFunction<typeof schema, string> = {\n        description: 'Test function',\n        parameters: schema,\n        execute: async (args: z.infer<typeof schema>) => {\n          // TypeScript should recognize args.name and args.age\n          return `${args.name} is ${args.age} years old`;\n        },\n      };\n\n      const result = await testFunction.execute({ name: 'John', age: 30 });\n      expect(result).toBe('John is 30 years old');\n    });\n\n    it('should handle async execution', async () => {\n      const schema = z.object({\n        delay: z.number().describe('Delay in milliseconds'),\n      });\n\n      const testFunction: CallableFunction<typeof schema, number> = {\n        description: 'Async test function',\n        parameters: schema,\n        execute: async (args: z.infer<typeof schema>) => {\n          await new Promise((resolve) => setTimeout(resolve, args.delay));\n          return args.delay;\n        },\n      };\n\n      const start = Date.now();\n      const result = await testFunction.execute({ delay: 100 });\n      const duration = Date.now() - start;\n\n      expect(result).toBe(100);\n      expect(duration).toBeGreaterThanOrEqual(95); // Allow for small timing variations\n    });\n\n    describe('nested array support', () => {\n      it('should handle nested array fields', () => {\n        const schema = z.object({\n          items: z.array(\n            z.object({\n              name: z.string().describe('the item name'),\n              modifiers: z\n                .array(\n                  z.object({\n                    modifier_name: z.string(),\n                    modifier_value: z.string(),\n                  }),\n                )\n                .describe('list of the modifiers applied on this item, such as size'),\n            }),\n          ),\n        });\n        const result = oaiParams(schema);\n        expect(result).toEqual({\n          type: 'object',\n          properties: {\n            items: {\n              type: 'array',\n              description: undefined,\n              items: {\n                type: 'object',\n                properties: {\n                  name: {\n                    type: 'string',\n                    description: 'the item name',\n                  },\n                  modifiers: {\n                    type: 'array',\n                    description: 'list of the modifiers applied on this item, such as size',\n                    items: {\n                      type: 'object',\n                      properties: {\n                        modifier_name: {\n                          type: 'string',\n                        },\n                        modifier_value: {\n                          type: 'string',\n                        },\n                      },\n                      required: ['modifier_name', 'modifier_value'],\n                    },\n                  },\n                },\n                required: ['name', 'modifiers'],\n              },\n            },\n          },\n          required: ['items'],\n        });\n      });\n    });\n  });\n});\n"],"mappings":"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","names":[]}