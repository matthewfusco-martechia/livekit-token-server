{"version":3,"sources":["../../src/ipc/inference_proc_executor.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2025 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { ChildProcess } from 'node:child_process';\nimport { fork } from 'node:child_process';\nimport { randomUUID } from 'node:crypto';\nimport { log } from '../log.js';\nimport type { InferenceExecutor } from './inference_executor.js';\nimport type { IPCMessage } from './message.js';\nimport { SupervisedProc } from './supervised_proc.js';\n\nclass PendingInference {\n  promise = new Promise<{ requestId: string; data: unknown; error?: Error }>((resolve) => {\n    this.resolve = resolve;\n  });\n  resolve(arg: { requestId: string; data: unknown; error?: Error }) {\n    arg;\n  }\n}\n\nexport class InferenceProcExecutor extends SupervisedProc implements InferenceExecutor {\n  #runners: { [id: string]: string };\n  #activeRequests: { [id: string]: PendingInference } = {};\n  #logger = log();\n\n  constructor({\n    runners,\n    initializeTimeout,\n    closeTimeout,\n    memoryWarnMB,\n    memoryLimitMB,\n    pingInterval,\n    pingTimeout,\n    highPingThreshold,\n  }: {\n    runners: { [id: string]: string };\n    initializeTimeout: number;\n    closeTimeout: number;\n    memoryWarnMB: number;\n    memoryLimitMB: number;\n    pingInterval: number;\n    pingTimeout: number;\n    highPingThreshold: number;\n  }) {\n    super(\n      initializeTimeout,\n      closeTimeout,\n      memoryWarnMB,\n      memoryLimitMB,\n      pingInterval,\n      pingTimeout,\n      highPingThreshold,\n    );\n    this.#runners = runners;\n  }\n\n  createProcess(): ChildProcess {\n    return fork(new URL(import.meta.resolve('./inference_proc_lazy_main.js')), [\n      JSON.stringify(this.#runners),\n    ]);\n  }\n\n  async mainTask(proc: ChildProcess) {\n    proc.on('message', (msg: IPCMessage) => {\n      switch (msg.case) {\n        case 'inferenceResponse':\n          const res = this.#activeRequests[msg.value.requestId];\n          delete this.#activeRequests[msg.value.requestId];\n          if (!res) {\n            this.#logger\n              .child({ requestId: msg.value.requestId })\n              .warn('received unexpected inference response');\n            return;\n          }\n\n          res.resolve(msg.value);\n      }\n    });\n  }\n\n  async doInference(method: string, data: unknown): Promise<unknown> {\n    const requestId = 'inference_req_' + randomUUID();\n    const fut = new PendingInference();\n    this.proc!.send({ case: 'inferenceRequest', value: { requestId, method, data } });\n    this.#activeRequests[requestId] = fut;\n\n    const res = await fut.promise;\n    if (res.error) {\n      throw new Error(`inference of ${method} failed: ${res.error}`);\n    }\n    return res.data;\n  }\n}\n"],"mappings":"AAIA,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAC3B,SAAS,WAAW;AAGpB,SAAS,sBAAsB;AAE/B,MAAM,iBAAiB;AAAA,EACrB,UAAU,IAAI,QAA6D,CAAC,YAAY;AACtF,SAAK,UAAU;AAAA,EACjB,CAAC;AAAA,EACD,QAAQ,KAA0D;AAChE;AAAA,EACF;AACF;AAEO,MAAM,8BAA8B,eAA4C;AAAA,EACrF;AAAA,EACA,kBAAsD,CAAC;AAAA,EACvD,UAAU,IAAI;AAAA,EAEd,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GASG;AACD;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,gBAA8B;AAC5B,WAAO,KAAK,IAAI,IAAI,YAAY,QAAQ,+BAA+B,CAAC,GAAG;AAAA,MACzE,KAAK,UAAU,KAAK,QAAQ;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,SAAS,MAAoB;AACjC,SAAK,GAAG,WAAW,CAAC,QAAoB;AACtC,cAAQ,IAAI,MAAM;AAAA,QAChB,KAAK;AACH,gBAAM,MAAM,KAAK,gBAAgB,IAAI,MAAM,SAAS;AACpD,iBAAO,KAAK,gBAAgB,IAAI,MAAM,SAAS;AAC/C,cAAI,CAAC,KAAK;AACR,iBAAK,QACF,MAAM,EAAE,WAAW,IAAI,MAAM,UAAU,CAAC,EACxC,KAAK,wCAAwC;AAChD;AAAA,UACF;AAEA,cAAI,QAAQ,IAAI,KAAK;AAAA,MACzB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,YAAY,QAAgB,MAAiC;AACjE,UAAM,YAAY,mBAAmB,WAAW;AAChD,UAAM,MAAM,IAAI,iBAAiB;AACjC,SAAK,KAAM,KAAK,EAAE,MAAM,oBAAoB,OAAO,EAAE,WAAW,QAAQ,KAAK,EAAE,CAAC;AAChF,SAAK,gBAAgB,SAAS,IAAI;AAElC,UAAM,MAAM,MAAM,IAAI;AACtB,QAAI,IAAI,OAAO;AACb,YAAM,IAAI,MAAM,gBAAgB,MAAM,YAAY,IAAI,KAAK,EAAE;AAAA,IAC/D;AACA,WAAO,IAAI;AAAA,EACb;AACF;","names":[]}