"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_node_events = __toESM(require("node:events"), 1);
var import_log = require("../log.cjs");
const ORPHANED_TIMEOUT = 15 * 1e3;
(async () => {
  if (process.send) {
    process.on("SIGINT", () => {
    });
    await (0, import_node_events.once)(process, "message").then(([msg]) => {
      msg = msg;
      if (msg.case !== "initializeRequest") {
        throw new Error("first message must be InitializeRequest");
      }
      (0, import_log.initializeLogger)(msg.value.loggerOptions);
    });
    const logger = (0, import_log.log)().child({ pid: process.pid });
    const runners = await Promise.all(
      Object.entries(JSON.parse(process.argv[2])).map(async ([k, v]) => {
        return [k, await import(v).then((m) => new m.default())];
      })
    ).then(Object.fromEntries);
    await Promise.all(
      Object.entries(runners).map(async ([runner, v]) => {
        logger.child({ runner }).debug("initializing inference runner");
        await v.initialize();
      })
    );
    logger.debug("all inference runners initialized");
    process.send({ case: "initializeResponse" });
    const closeEvent = new import_node_events.default();
    const orphanedTimeout = setTimeout(() => {
      logger.warn("process orphaned, shutting down");
      process.exit();
    }, ORPHANED_TIMEOUT);
    const handleInferenceRequest = async ({
      method,
      requestId,
      data
    }) => {
      if (!runners[method]) {
        logger.child({ method }).warn("unknown inference method");
      }
      try {
        const resp = await runners[method].run(data);
        process.send({ case: "inferenceResponse", value: { requestId, data: resp } });
      } catch (error) {
        process.send({ case: "inferenceResponse", value: { requestId, error } });
      }
    };
    process.on("message", (msg) => {
      switch (msg.case) {
        case "pingRequest":
          orphanedTimeout.refresh();
          process.send({
            case: "pongResponse",
            value: { lastTimestamp: msg.value.timestamp, timestamp: Date.now() }
          });
          break;
        case "shutdownRequest":
          closeEvent.emit("close");
          break;
        case "inferenceRequest":
          handleInferenceRequest(msg.value);
      }
    });
  }
})();
//# sourceMappingURL=inference_proc_lazy_main.cjs.map