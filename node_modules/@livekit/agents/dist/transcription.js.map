{"version":3,"sources":["../src/transcription.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { TranscriptionSegment } from '@livekit/protocol';\nimport { AudioFrame } from '@livekit/rtc-node';\nimport type { TypedEventEmitter as TypedEmitter } from '@livekit/typed-emitter';\nimport { randomUUID } from 'node:crypto';\nimport { EventEmitter } from 'node:events';\nimport { basic } from './tokenize/index.js';\nimport type { SentenceStream, SentenceTokenizer } from './tokenize/tokenizer.js';\nimport { AsyncIterableQueue, Future } from './utils.js';\n\n// standard speech rate in hyphens/ms\nconst STANDARD_SPEECH_RATE = 3830;\n\nexport interface TextSyncOptions {\n  language: string;\n  speed: number;\n  newSentenceDelay: number;\n  sentenceTokenizer: SentenceTokenizer;\n  hyphenateWord: (word: string) => string[];\n  splitWords: (words: string) => [string, number, number][];\n}\n\nexport const defaultTextSyncOptions: TextSyncOptions = {\n  language: '',\n  speed: 1,\n  newSentenceDelay: 400,\n  sentenceTokenizer: new basic.SentenceTokenizer(),\n  hyphenateWord: basic.hyphenateWord,\n  splitWords: basic.splitWords,\n};\n\ninterface AudioData {\n  pushedDuration: number;\n  done: boolean;\n}\n\ninterface TextData {\n  sentenceStream: SentenceStream;\n  pushedText: string;\n  done: boolean;\n  forwardedHyphens: number;\n  forwardedSentences: number;\n}\n\ntype SyncCallbacks = {\n  textUpdated: (text: TranscriptionSegment) => void;\n};\n\nexport class TextAudioSynchronizer extends (EventEmitter as new () => TypedEmitter<SyncCallbacks>) {\n  #opts: TextSyncOptions;\n  #speed: number;\n\n  #closed = false;\n  #interrupted = false;\n  #closeFut = new Future();\n\n  #playingSegIndex = -1;\n  #finishedSegIndex = -1;\n\n  #textQChanged = new AsyncIterableQueue<number>();\n  #textQ: (TextData | undefined)[] = [];\n  #audioQChanged = new AsyncIterableQueue<number>();\n  #audioQ: (AudioData | undefined)[] = [];\n\n  #playedText = '';\n  #task?: Promise<void>;\n\n  #audioData?: AudioData;\n  #textData?: TextData;\n\n  constructor(opts: TextSyncOptions) {\n    super();\n\n    this.#opts = opts;\n    this.#speed = opts.speed * STANDARD_SPEECH_RATE;\n  }\n\n  pushAudio(frame: AudioFrame) {\n    this.#checkNotClosed();\n    if (!this.#audioData) {\n      this.#audioData = { pushedDuration: 0, done: false };\n      this.#audioQ.push(this.#audioData);\n      this.#audioQChanged.put(1);\n    }\n    this.#audioData.pushedDuration += frame.samplesPerChannel / frame.sampleRate;\n  }\n\n  pushText(text: string) {\n    this.#checkNotClosed();\n    if (!this.#textData) {\n      this.#textData = {\n        sentenceStream: this.#opts.sentenceTokenizer.stream(),\n        pushedText: '',\n        done: false,\n        forwardedHyphens: 0,\n        forwardedSentences: 0,\n      };\n      this.#textQ.push(this.#textData);\n      this.#textQChanged.put(1);\n    }\n\n    this.#textData.pushedText += text;\n    this.#textData.sentenceStream.pushText(text);\n  }\n\n  markAudioSegmentEnd() {\n    this.#checkNotClosed();\n\n    if (!this.#audioData) {\n      // create empty audio data if none exists\n      this.pushAudio(new AudioFrame(new Int16Array(), 24000, 1, 0));\n    }\n\n    this.#audioData!.done = true;\n    this.#audioData = undefined;\n  }\n\n  markTextSegmentEnd() {\n    this.#checkNotClosed();\n\n    if (!this.#textData) {\n      this.pushText('');\n    }\n\n    this.#textData!.done = true;\n    this.#textData?.sentenceStream.flush();\n    this.#textData?.sentenceStream.close();\n    this.#textData = undefined;\n  }\n\n  segmentPlayoutStarted() {\n    this.#checkNotClosed();\n    this.#playingSegIndex++;\n\n    if (!this.#task) {\n      this.#task = this.#mainLoop();\n    }\n  }\n\n  segmentPlayoutFinished() {\n    this.#checkNotClosed();\n    this.#finishedSegIndex++;\n  }\n\n  get playedText(): string {\n    return this.#playedText;\n  }\n\n  async close(interrupt: boolean) {\n    if (this.#closed) {\n      return;\n    }\n    this.#closed = true;\n    this.#interrupted = interrupt;\n    this.#closeFut.resolve();\n\n    for (const textData of this.#textQ) {\n      textData?.sentenceStream.close();\n    }\n\n    this.#textQ.push(undefined);\n    this.#audioQ.push(undefined);\n    this.#textQChanged.put(1);\n    this.#audioQChanged.put(1);\n\n    await this.#task;\n  }\n\n  async #mainLoop() {\n    let segIndex = 0;\n    let qDone = false;\n\n    while (!qDone) {\n      await this.#textQChanged.next();\n      await this.#audioQChanged.next();\n\n      while (this.#textQ.length && this.#audioQ.length) {\n        const textData = this.#textQ.pop();\n        const audioData = this.#audioQ.pop();\n\n        if (!(textData && audioData)) {\n          qDone = true;\n          break;\n        }\n\n        // wait for segment to start playing\n        while (!this.#closed) {\n          if (this.#playingSegIndex >= segIndex) break;\n          await this.#sleepIfNotClosed(125);\n        }\n\n        const sentenceStream = textData.sentenceStream;\n        const forwardStartTime = Date.now();\n\n        for await (const ev of sentenceStream) {\n          await this.#syncSentence(segIndex, forwardStartTime, textData, audioData, ev.token);\n        }\n\n        segIndex++;\n      }\n    }\n  }\n\n  async #syncSentence(\n    segIndex: number,\n    segStartTime: number,\n    textData: TextData,\n    audioData: AudioData,\n    sentence: string,\n  ) {\n    let realSpeed: number | undefined;\n    if (audioData.pushedDuration > 0 && audioData.done) {\n      realSpeed = this.#calcHyphens(textData.pushedText).length / audioData.pushedDuration;\n    }\n\n    const segId = 'SG_' + randomUUID();\n    const words = this.#opts.splitWords(sentence);\n    const processedWords: string[] = [];\n\n    const ogText = this.#playedText;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const [word, _, end] of words) {\n      if (segIndex <= this.#finishedSegIndex) break;\n      if (this.#interrupted) return;\n\n      const wordHyphens = this.#opts.hyphenateWord(word).length;\n      processedWords.push(word);\n\n      const elapsed = Date.now() - segStartTime;\n      const text = sentence.slice(0, end); // TODO: rstrip punctuations\n\n      let speed = this.#speed;\n      let delay: number;\n      if (realSpeed) {\n        speed = realSpeed;\n        const estimatedPausesMs = textData.forwardedSentences * this.#opts.newSentenceDelay;\n        const hyphPauses = estimatedPausesMs * speed;\n        const targetHyphens = Math.round(speed * elapsed);\n        const dt = targetHyphens - textData.forwardedHyphens - hyphPauses;\n        const toWaitHyphens = Math.max(0, wordHyphens - dt);\n        delay = toWaitHyphens / speed;\n      } else {\n        delay = wordHyphens / speed;\n      }\n\n      const firstDelay = Math.min(delay / 2, 2 / speed);\n      await this.#sleepIfNotClosed(firstDelay * 1000000);\n\n      this.emit(\n        'textUpdated',\n        new TranscriptionSegment({\n          id: segId,\n          text: text,\n          startTime: BigInt(0),\n          endTime: BigInt(0),\n          final: false,\n          language: this.#opts.language,\n        }),\n      );\n\n      this.#playedText = `${ogText} ${text}`;\n      await this.#sleepIfNotClosed((delay - firstDelay) * 1000000);\n      textData.forwardedHyphens += wordHyphens;\n    }\n\n    this.emit(\n      'textUpdated',\n      new TranscriptionSegment({\n        id: segId,\n        text: sentence,\n        startTime: BigInt(0),\n        endTime: BigInt(0),\n        final: true,\n        language: this.#opts.language,\n      }),\n    );\n\n    this.#playedText = `${ogText} ${sentence}`;\n\n    await this.#sleepIfNotClosed(this.#opts.newSentenceDelay);\n    textData.forwardedSentences++;\n  }\n\n  async #sleepIfNotClosed(delay: number) {\n    await Promise.race([\n      this.#closeFut.await,\n      new Promise((resolve) => setTimeout(resolve, delay)),\n    ]);\n  }\n\n  #calcHyphens(text: string): string[] {\n    const hyphens: string[] = [];\n    const words = this.#opts.splitWords(text);\n    for (const word of words) {\n      const n = this.#opts.hyphenateWord(word[0]);\n      hyphens.push(...n);\n    }\n    return hyphens;\n  }\n\n  #checkNotClosed() {\n    if (this.#closed) {\n      throw new Error('TextAudioSynchronizer is closed');\n    }\n  }\n}\n"],"mappings":"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","names":[]}