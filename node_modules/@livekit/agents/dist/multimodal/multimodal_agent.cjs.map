{"version":3,"sources":["../../src/multimodal/multimodal_agent.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type {\n  LocalTrackPublication,\n  RemoteAudioTrack,\n  RemoteParticipant,\n  RemoteTrack,\n  RemoteTrackPublication,\n  Room,\n} from '@livekit/rtc-node';\nimport {\n  AudioSource,\n  AudioStream,\n  LocalAudioTrack,\n  RoomEvent,\n  TrackPublishOptions,\n  TrackSource,\n} from '@livekit/rtc-node';\nimport { EventEmitter } from 'node:events';\nimport { AudioByteStream } from '../audio.js';\nimport * as llm from '../llm/index.js';\nimport { log } from '../log.js';\nimport type { MultimodalLLMMetrics } from '../metrics/base.js';\nimport { TextAudioSynchronizer, defaultTextSyncOptions } from '../transcription.js';\nimport { findMicroTrackId } from '../utils.js';\nimport { AgentPlayout, type PlayoutHandle } from './agent_playout.js';\n\n/**\n * @internal\n * @beta\n */\nexport abstract class RealtimeSession extends EventEmitter {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  abstract conversation: any; // openai.realtime.Conversation\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  abstract inputAudioBuffer: any; // openai.realtime.InputAudioBuffer\n  abstract fncCtx: llm.FunctionContext | undefined;\n  abstract recoverFromTextResponse(itemId: string): void;\n}\n\n/**\n * @internal\n * @beta\n */\nexport abstract class RealtimeModel {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  abstract session(options: any): RealtimeSession; // openai.realtime.ModelOptions\n  abstract close(): Promise<void>;\n  abstract sampleRate: number;\n  abstract numChannels: number;\n  abstract inFrameSize: number;\n  abstract outFrameSize: number;\n}\n\nexport type AgentState = 'initializing' | 'thinking' | 'listening' | 'speaking';\nexport const AGENT_STATE_ATTRIBUTE = 'lk.agent.state';\n\n/** @beta */\nexport class MultimodalAgent extends EventEmitter {\n  model: RealtimeModel;\n  room: Room | null = null;\n  linkedParticipant: RemoteParticipant | null = null;\n  subscribedTrack: RemoteAudioTrack | null = null;\n  readMicroTask: Promise<void> | null = null;\n\n  #textResponseRetries = 0;\n  #maxTextResponseRetries: number;\n\n  constructor({\n    model,\n    chatCtx,\n    fncCtx,\n    maxTextResponseRetries = 5,\n  }: {\n    model: RealtimeModel;\n    chatCtx?: llm.ChatContext;\n    fncCtx?: llm.FunctionContext;\n    maxTextResponseRetries?: number;\n  }) {\n    super();\n    this.model = model;\n    this.#chatCtx = chatCtx;\n    this.#fncCtx = fncCtx;\n    this.#maxTextResponseRetries = maxTextResponseRetries;\n  }\n\n  #participant: RemoteParticipant | string | null = null;\n  #agentPublication: LocalTrackPublication | null = null;\n  #localTrackSid: string | null = null;\n  #localSource: AudioSource | null = null;\n  #agentPlayout: AgentPlayout | null = null;\n  #playingHandle: PlayoutHandle | undefined = undefined;\n  #logger = log();\n  #session: RealtimeSession | null = null;\n  #fncCtx: llm.FunctionContext | undefined = undefined;\n  #chatCtx: llm.ChatContext | undefined = undefined;\n\n  #_started: boolean = false;\n  #_pendingFunctionCalls: Set<string> = new Set();\n  #_speaking: boolean = false;\n\n  get fncCtx(): llm.FunctionContext | undefined {\n    return this.#fncCtx;\n  }\n\n  set fncCtx(ctx: llm.FunctionContext | undefined) {\n    this.#fncCtx = ctx;\n    if (this.#session) {\n      this.#session.fncCtx = ctx;\n    }\n  }\n\n  get #pendingFunctionCalls(): Set<string> {\n    return this.#_pendingFunctionCalls;\n  }\n\n  set #pendingFunctionCalls(calls: Set<string>) {\n    this.#_pendingFunctionCalls = calls;\n    this.#updateState();\n  }\n\n  get #speaking(): boolean {\n    return this.#_speaking;\n  }\n\n  set #speaking(isSpeaking: boolean) {\n    this.#_speaking = isSpeaking;\n    this.#updateState();\n  }\n\n  get #started(): boolean {\n    return this.#_started;\n  }\n\n  set #started(started: boolean) {\n    this.#_started = started;\n    this.#updateState();\n  }\n\n  start(\n    room: Room,\n    participant: RemoteParticipant | string | null = null,\n  ): Promise<RealtimeSession> {\n    return new Promise(async (resolve, reject) => {\n      if (this.#started) {\n        reject(new Error('MultimodalAgent already started'));\n      }\n      this.#updateState();\n\n      room.on(RoomEvent.ParticipantConnected, (participant: RemoteParticipant) => {\n        // automatically link to the first participant that connects, if not already linked\n        if (this.linkedParticipant) {\n          return;\n        }\n        this.#linkParticipant(participant.identity!);\n      });\n      room.on(\n        RoomEvent.TrackPublished,\n        (trackPublication: RemoteTrackPublication, participant: RemoteParticipant) => {\n          if (\n            this.linkedParticipant &&\n            participant.identity === this.linkedParticipant.identity &&\n            trackPublication.source === TrackSource.SOURCE_MICROPHONE &&\n            !trackPublication.subscribed\n          ) {\n            trackPublication.setSubscribed(true);\n          }\n        },\n      );\n      room.on(RoomEvent.TrackSubscribed, this.#handleTrackSubscription.bind(this));\n\n      this.room = room;\n      this.#participant = participant;\n\n      this.#localSource = new AudioSource(this.model.sampleRate, this.model.numChannels);\n      this.#agentPlayout = new AgentPlayout(\n        this.#localSource,\n        this.model.sampleRate,\n        this.model.numChannels,\n        this.model.inFrameSize,\n        this.model.outFrameSize,\n      );\n      const onPlayoutStarted = () => {\n        this.emit('agent_started_speaking');\n        this.#speaking = true;\n      };\n\n      const onPlayoutStopped = (interrupted: boolean) => {\n        this.emit('agent_stopped_speaking');\n        this.#speaking = false;\n        if (this.#playingHandle) {\n          let text = this.#playingHandle.synchronizer.playedText;\n          if (interrupted) {\n            text += 'â€¦';\n          }\n          const msg = llm.ChatMessage.create({\n            role: llm.ChatRole.ASSISTANT,\n            text,\n          });\n\n          if (interrupted) {\n            this.emit('agent_speech_interrupted', msg);\n          } else {\n            this.emit('agent_speech_committed', msg);\n          }\n          this.#logger.child({ transcription: text, interrupted }).debug('committed agent speech');\n        }\n      };\n\n      this.#agentPlayout.on('playout_started', onPlayoutStarted);\n      this.#agentPlayout.on('playout_stopped', onPlayoutStopped);\n\n      const track = LocalAudioTrack.createAudioTrack('assistant_voice', this.#localSource);\n      const options = new TrackPublishOptions();\n      options.source = TrackSource.SOURCE_MICROPHONE;\n      this.#agentPublication = (await room.localParticipant?.publishTrack(track, options)) || null;\n      if (!this.#agentPublication) {\n        this.#logger.error('Failed to publish track');\n        reject(new Error('Failed to publish track'));\n        return;\n      }\n\n      await this.#agentPublication.waitForSubscription();\n\n      if (participant) {\n        if (typeof participant === 'string') {\n          this.#linkParticipant(participant);\n        } else {\n          this.#linkParticipant(participant.identity!);\n        }\n      } else {\n        // No participant specified, try to find the first participant in the room\n        for (const participant of room.remoteParticipants.values()) {\n          this.#linkParticipant(participant.identity!);\n          break;\n        }\n      }\n\n      this.#session = this.model.session({ fncCtx: this.#fncCtx, chatCtx: this.#chatCtx });\n      this.#started = true;\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.#session.on('response_content_added', (message: any) => {\n        // openai.realtime.RealtimeContent\n        if (message.contentType === 'text') return;\n\n        const synchronizer = new TextAudioSynchronizer(defaultTextSyncOptions);\n        synchronizer.on('textUpdated', (text) => {\n          this.#publishTranscription(\n            this.room!.localParticipant!.identity!,\n            this.#getLocalTrackSid()!,\n            text.text,\n            text.final,\n            text.id,\n          );\n        });\n\n        const handle = this.#agentPlayout?.play(\n          message.itemId,\n          message.contentIndex,\n          synchronizer,\n          message.textStream,\n          message.audioStream,\n        );\n        this.#playingHandle = handle;\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.#session.on('response_content_done', (message: any) => {\n        // openai.realtime.RealtimeContent\n        if (message.contentType === 'text') {\n          if (this.#textResponseRetries >= this.#maxTextResponseRetries) {\n            throw new Error(\n              'The OpenAI Realtime API returned a text response ' +\n                `after ${this.#maxTextResponseRetries} retries. ` +\n                'Please try to reduce the number of text system or ' +\n                'assistant messages in the chat context.',\n            );\n          }\n\n          this.#textResponseRetries++;\n          this.#logger\n            .child({\n              itemId: message.itemId,\n              text: message.text,\n              retries: this.#textResponseRetries,\n            })\n            .warn(\n              'The OpenAI Realtime API returned a text response instead of audio. ' +\n                'Attempting to recover to audio mode...',\n            );\n          this.#session!.recoverFromTextResponse(message.itemId);\n        } else {\n          this.#textResponseRetries = 0;\n        }\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.#session.on('input_speech_committed', (ev: any) => {\n        // openai.realtime.InputSpeechCommittedEvent\n        const participantIdentity = this.linkedParticipant?.identity;\n        const trackSid = this.subscribedTrack?.sid;\n        if (participantIdentity && trackSid) {\n          this.#publishTranscription(participantIdentity, trackSid, 'â€¦', false, ev.itemId);\n        } else {\n          this.#logger.error('Participant or track not set');\n        }\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.#session.on('input_speech_transcription_completed', (ev: any) => {\n        // openai.realtime.InputSpeechTranscriptionCompletedEvent\n        const transcription = ev.transcript;\n        const participantIdentity = this.linkedParticipant?.identity;\n        const trackSid = this.subscribedTrack?.sid;\n        if (participantIdentity && trackSid) {\n          this.#publishTranscription(participantIdentity, trackSid, transcription, true, ev.itemId);\n        } else {\n          this.#logger.error('Participant or track not set');\n        }\n        const userMsg = llm.ChatMessage.create({\n          role: llm.ChatRole.USER,\n          text: transcription,\n        });\n        this.emit('user_speech_committed', userMsg);\n        this.#logger.child({ transcription }).debug('committed user speech');\n      });\n\n      this.#session.on('input_speech_started', (ev: any) => {\n        this.emit('user_started_speaking');\n        if (this.#playingHandle && !this.#playingHandle.done) {\n          this.#playingHandle.interrupt();\n\n          this.#session!.conversation.item.truncate(\n            this.#playingHandle.itemId,\n            this.#playingHandle.contentIndex,\n            Math.floor((this.#playingHandle.audioSamples / 24000) * 1000),\n          );\n\n          this.#playingHandle = undefined;\n        }\n\n        const participantIdentity = this.linkedParticipant?.identity;\n        const trackSid = this.subscribedTrack?.sid;\n        if (participantIdentity && trackSid) {\n          this.#publishTranscription(participantIdentity, trackSid, 'â€¦', false, ev.itemId);\n        }\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      this.#session.on('input_speech_stopped', (ev: any) => {\n        this.emit('user_stopped_speaking');\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.#session.on('function_call_started', (ev: any) => {\n        this.#pendingFunctionCalls.add(ev.callId);\n        this.#updateState();\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.#session.on('function_call_completed', (ev: any) => {\n        this.#pendingFunctionCalls.delete(ev.callId);\n        this.#updateState();\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.#session.on('function_call_failed', (ev: any) => {\n        this.#pendingFunctionCalls.delete(ev.callId);\n        this.#updateState();\n      });\n\n      this.#session.on('metrics_collected', (metrics: MultimodalLLMMetrics) => {\n        this.emit('metrics_collected', metrics);\n      });\n\n      resolve(this.#session);\n    });\n  }\n\n  #linkParticipant(participantIdentity: string): void {\n    if (!this.room) {\n      this.#logger.error('Room is not set');\n      return;\n    }\n\n    this.linkedParticipant = this.room.remoteParticipants.get(participantIdentity) || null;\n    if (!this.linkedParticipant) {\n      this.#logger.error(`Participant with identity ${participantIdentity} not found`);\n      return;\n    }\n\n    if (this.linkedParticipant.trackPublications.size > 0) {\n      this.#subscribeToMicrophone();\n    }\n\n    // also check if already subscribed\n    for (const publication of this.linkedParticipant.trackPublications.values()) {\n      if (publication.source === TrackSource.SOURCE_MICROPHONE && publication.track) {\n        this.#handleTrackSubscription(publication.track, publication, this.linkedParticipant);\n        break;\n      }\n    }\n  }\n\n  #subscribeToMicrophone(): void {\n    if (!this.linkedParticipant) {\n      this.#logger.error('Participant is not set');\n      return;\n    }\n\n    let microphonePublication: RemoteTrackPublication | undefined = undefined;\n    for (const publication of this.linkedParticipant.trackPublications.values()) {\n      if (publication.source === TrackSource.SOURCE_MICROPHONE) {\n        microphonePublication = publication;\n        break;\n      }\n    }\n    if (!microphonePublication) {\n      return;\n    }\n\n    if (!microphonePublication.subscribed) {\n      microphonePublication.setSubscribed(true);\n    }\n  }\n\n  #handleTrackSubscription(\n    track: RemoteTrack,\n    publication: RemoteTrackPublication,\n    participant: RemoteParticipant,\n  ) {\n    if (\n      publication.source !== TrackSource.SOURCE_MICROPHONE ||\n      participant.identity !== this.linkedParticipant?.identity\n    ) {\n      return;\n    }\n    const readAudioStreamTask = async (audioStream: AudioStream) => {\n      const bstream = new AudioByteStream(\n        this.model.sampleRate,\n        this.model.numChannels,\n        this.model.inFrameSize,\n      );\n\n      for await (const frame of audioStream) {\n        const audioData = frame.data;\n        for (const frame of bstream.write(audioData.buffer)) {\n          this.#session!.inputAudioBuffer.append(frame);\n        }\n      }\n    };\n    this.subscribedTrack = track;\n\n    this.readMicroTask = new Promise<void>((resolve, reject) => {\n      readAudioStreamTask(new AudioStream(track, this.model.sampleRate, this.model.numChannels))\n        .then(resolve)\n        .catch(reject);\n    });\n  }\n\n  #getLocalTrackSid(): string | null {\n    if (!this.#localTrackSid && this.room && this.room.localParticipant) {\n      this.#localTrackSid = findMicroTrackId(this.room, this.room.localParticipant!.identity!);\n    }\n    return this.#localTrackSid;\n  }\n\n  #publishTranscription(\n    participantIdentity: string,\n    trackSid: string,\n    text: string,\n    isFinal: boolean,\n    id: string,\n  ): void {\n    this.#logger.debug(\n      `Publishing transcription ${participantIdentity} ${trackSid} ${text} ${isFinal} ${id}`,\n    );\n    if (!this.room?.localParticipant) {\n      this.#logger.error('Room or local participant not set');\n      return;\n    }\n\n    this.room.localParticipant.publishTranscription({\n      participantIdentity,\n      trackSid,\n      segments: [\n        {\n          text,\n          final: isFinal,\n          id,\n          startTime: BigInt(0),\n          endTime: BigInt(0),\n          language: '',\n        },\n      ],\n    });\n  }\n\n  #updateState() {\n    let newState: AgentState = 'initializing';\n    if (this.#pendingFunctionCalls.size > 0) {\n      newState = 'thinking';\n    } else if (this.#speaking) {\n      newState = 'speaking';\n    } else if (this.#started) {\n      newState = 'listening';\n    }\n\n    this.#setState(newState);\n  }\n\n  #setState(state: AgentState) {\n    if (this.room?.isConnected && this.room.localParticipant) {\n      const currentState = this.room.localParticipant.attributes![AGENT_STATE_ATTRIBUTE];\n      if (currentState !== state) {\n        this.room.localParticipant.setAttributes({\n          [AGENT_STATE_ATTRIBUTE]: state,\n        });\n        this.#logger.debug(`${AGENT_STATE_ATTRIBUTE}: ${currentState} ->${state}`);\n      }\n    }\n  }\n}\n"],"mappings":"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","names":["participant","_a","frame"]}