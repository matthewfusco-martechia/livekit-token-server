"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var agent_output_exports = {};
__export(agent_output_exports, {
  AgentOutput: () => AgentOutput,
  SynthesisHandle: () => SynthesisHandle
});
module.exports = __toCommonJS(agent_output_exports);
var import_log = require("../log.cjs");
var import_tts = require("../tts/index.cjs");
var import_utils = require("../utils.cjs");
class SynthesisHandle {
  static FLUSH_SENTINEL = Symbol("FLUSH_SENTINEL");
  #speechId;
  text;
  ttsSource;
  #agentPlayout;
  tts;
  queue = new import_utils.AsyncIterableQueue();
  #playHandle;
  intFut = new import_utils.Future();
  #logger = (0, import_log.log)();
  synchronizer;
  constructor(speechId, ttsSource, agentPlayout, tts, synchronizer) {
    this.#speechId = speechId;
    this.ttsSource = ttsSource;
    this.#agentPlayout = agentPlayout;
    this.tts = tts;
    this.synchronizer = synchronizer;
  }
  get speechId() {
    return this.#speechId;
  }
  get validated() {
    return !!this.#playHandle;
  }
  get interrupted() {
    return this.intFut.done;
  }
  get playHandle() {
    return this.#playHandle;
  }
  /** Validate the speech for playout. */
  play() {
    if (this.interrupted) {
      throw new Error("synthesis was interrupted");
    }
    this.#playHandle = this.#agentPlayout.play(this.#speechId, this.queue, this.synchronizer);
    return this.#playHandle;
  }
  /** Interrupt the speech. */
  interrupt() {
    var _a;
    if (this.interrupted) {
      return;
    }
    this.#logger.child({ speechId: this.#speechId }).debug("interrupting synthesis/playout");
    (_a = this.#playHandle) == null ? void 0 : _a.interrupt();
    this.intFut.resolve();
  }
}
class AgentOutput {
  #agentPlayout;
  #tts;
  #tasks = [];
  constructor(agentPlayout, tts) {
    this.#agentPlayout = agentPlayout;
    this.#tts = tts;
  }
  get playout() {
    return this.#agentPlayout;
  }
  async close() {
    this.#tasks.forEach((task) => task.cancel());
    await Promise.all(this.#tasks);
  }
  synthesize(speechId, ttsSource, synchronizer) {
    const handle = new SynthesisHandle(
      speechId,
      ttsSource,
      this.#agentPlayout,
      this.#tts,
      synchronizer
    );
    const task = this.#synthesize(handle);
    this.#tasks.push(task);
    task.finally(() => this.#tasks.splice(this.#tasks.indexOf(task)));
    return handle;
  }
  #synthesize(handle) {
    return new import_utils.CancellablePromise(async (resolve, _, onCancel) => {
      const ttsSource = await handle.ttsSource;
      let task;
      if (typeof ttsSource === "string") {
        task = stringSynthesisTask(ttsSource, handle);
      } else {
        task = streamSynthesisTask(ttsSource, handle);
      }
      onCancel(() => {
        (0, import_utils.gracefullyCancel)(task);
      });
      try {
        await Promise.any([task, handle.intFut.await]);
      } finally {
        if (handle.intFut.done) {
          (0, import_utils.gracefullyCancel)(task);
        } else {
          task.then((text) => {
            handle.text = text;
          });
        }
      }
      resolve();
    });
  }
}
const stringSynthesisTask = (text, handle) => {
  return new import_utils.CancellablePromise(async (resolve, _, onCancel) => {
    let cancelled = false;
    onCancel(() => {
      cancelled = true;
    });
    const ttsStream = handle.tts.stream();
    ttsStream.pushText(text);
    handle.synchronizer.pushText(text);
    handle.synchronizer.markTextSegmentEnd();
    ttsStream.flush();
    ttsStream.endInput();
    for await (const audio of ttsStream) {
      if (cancelled || audio === import_tts.SynthesizeStream.END_OF_STREAM) {
        break;
      }
      handle.queue.put(audio.frame);
    }
    handle.queue.put(SynthesisHandle.FLUSH_SENTINEL);
    resolve(text);
  });
};
const streamSynthesisTask = (stream, handle) => {
  return new import_utils.CancellablePromise(async (resolve, _, onCancel) => {
    let fullText = "";
    let cancelled = false;
    onCancel(() => {
      cancelled = true;
    });
    const ttsStream = handle.tts.stream();
    const readGeneratedAudio = async () => {
      for await (const audio of ttsStream) {
        if (cancelled) break;
        if (audio === import_tts.SynthesizeStream.END_OF_STREAM) {
          break;
        }
        handle.queue.put(audio.frame);
      }
      handle.queue.put(SynthesisHandle.FLUSH_SENTINEL);
    };
    readGeneratedAudio();
    for await (const text of stream) {
      fullText += text;
      if (cancelled) break;
      handle.synchronizer.pushText(text);
      ttsStream.pushText(text);
    }
    handle.synchronizer.markTextSegmentEnd();
    if (!fullText || fullText.trim().length === 0) {
      cancelled = true;
      handle.queue.put(SynthesisHandle.FLUSH_SENTINEL);
    }
    ttsStream.flush();
    ttsStream.endInput();
    resolve(fullText);
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AgentOutput,
  SynthesisHandle
});
//# sourceMappingURL=agent_output.cjs.map