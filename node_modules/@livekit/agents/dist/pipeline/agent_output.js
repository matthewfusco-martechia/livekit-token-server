import { log } from "../log.js";
import { SynthesizeStream } from "../tts/index.js";
import { AsyncIterableQueue, CancellablePromise, Future, gracefullyCancel } from "../utils.js";
class SynthesisHandle {
  static FLUSH_SENTINEL = Symbol("FLUSH_SENTINEL");
  #speechId;
  text;
  ttsSource;
  #agentPlayout;
  tts;
  queue = new AsyncIterableQueue();
  #playHandle;
  intFut = new Future();
  #logger = log();
  synchronizer;
  constructor(speechId, ttsSource, agentPlayout, tts, synchronizer) {
    this.#speechId = speechId;
    this.ttsSource = ttsSource;
    this.#agentPlayout = agentPlayout;
    this.tts = tts;
    this.synchronizer = synchronizer;
  }
  get speechId() {
    return this.#speechId;
  }
  get validated() {
    return !!this.#playHandle;
  }
  get interrupted() {
    return this.intFut.done;
  }
  get playHandle() {
    return this.#playHandle;
  }
  /** Validate the speech for playout. */
  play() {
    if (this.interrupted) {
      throw new Error("synthesis was interrupted");
    }
    this.#playHandle = this.#agentPlayout.play(this.#speechId, this.queue, this.synchronizer);
    return this.#playHandle;
  }
  /** Interrupt the speech. */
  interrupt() {
    var _a;
    if (this.interrupted) {
      return;
    }
    this.#logger.child({ speechId: this.#speechId }).debug("interrupting synthesis/playout");
    (_a = this.#playHandle) == null ? void 0 : _a.interrupt();
    this.intFut.resolve();
  }
}
class AgentOutput {
  #agentPlayout;
  #tts;
  #tasks = [];
  constructor(agentPlayout, tts) {
    this.#agentPlayout = agentPlayout;
    this.#tts = tts;
  }
  get playout() {
    return this.#agentPlayout;
  }
  async close() {
    this.#tasks.forEach((task) => task.cancel());
    await Promise.all(this.#tasks);
  }
  synthesize(speechId, ttsSource, synchronizer) {
    const handle = new SynthesisHandle(
      speechId,
      ttsSource,
      this.#agentPlayout,
      this.#tts,
      synchronizer
    );
    const task = this.#synthesize(handle);
    this.#tasks.push(task);
    task.finally(() => this.#tasks.splice(this.#tasks.indexOf(task)));
    return handle;
  }
  #synthesize(handle) {
    return new CancellablePromise(async (resolve, _, onCancel) => {
      const ttsSource = await handle.ttsSource;
      let task;
      if (typeof ttsSource === "string") {
        task = stringSynthesisTask(ttsSource, handle);
      } else {
        task = streamSynthesisTask(ttsSource, handle);
      }
      onCancel(() => {
        gracefullyCancel(task);
      });
      try {
        await Promise.any([task, handle.intFut.await]);
      } finally {
        if (handle.intFut.done) {
          gracefullyCancel(task);
        } else {
          task.then((text) => {
            handle.text = text;
          });
        }
      }
      resolve();
    });
  }
}
const stringSynthesisTask = (text, handle) => {
  return new CancellablePromise(async (resolve, _, onCancel) => {
    let cancelled = false;
    onCancel(() => {
      cancelled = true;
    });
    const ttsStream = handle.tts.stream();
    ttsStream.pushText(text);
    handle.synchronizer.pushText(text);
    handle.synchronizer.markTextSegmentEnd();
    ttsStream.flush();
    ttsStream.endInput();
    for await (const audio of ttsStream) {
      if (cancelled || audio === SynthesizeStream.END_OF_STREAM) {
        break;
      }
      handle.queue.put(audio.frame);
    }
    handle.queue.put(SynthesisHandle.FLUSH_SENTINEL);
    resolve(text);
  });
};
const streamSynthesisTask = (stream, handle) => {
  return new CancellablePromise(async (resolve, _, onCancel) => {
    let fullText = "";
    let cancelled = false;
    onCancel(() => {
      cancelled = true;
    });
    const ttsStream = handle.tts.stream();
    const readGeneratedAudio = async () => {
      for await (const audio of ttsStream) {
        if (cancelled) break;
        if (audio === SynthesizeStream.END_OF_STREAM) {
          break;
        }
        handle.queue.put(audio.frame);
      }
      handle.queue.put(SynthesisHandle.FLUSH_SENTINEL);
    };
    readGeneratedAudio();
    for await (const text of stream) {
      fullText += text;
      if (cancelled) break;
      handle.synchronizer.pushText(text);
      ttsStream.pushText(text);
    }
    handle.synchronizer.markTextSegmentEnd();
    if (!fullText || fullText.trim().length === 0) {
      cancelled = true;
      handle.queue.put(SynthesisHandle.FLUSH_SENTINEL);
    }
    ttsStream.flush();
    ttsStream.endInput();
    resolve(fullText);
  });
};
export {
  AgentOutput,
  SynthesisHandle
};
//# sourceMappingURL=agent_output.js.map