{"version":3,"sources":["../../src/metrics/base.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\n\nexport interface LLMMetrics {\n  requestId: string;\n  timestamp: number;\n  ttft: number;\n  duration: number;\n  label: string;\n  cancelled: boolean;\n  completionTokens: number;\n  promptTokens: number;\n  totalTokens: number;\n  tokensPerSecond: number;\n  error?: Error;\n}\n\nexport interface STTMetrics {\n  requestId: string;\n  timestamp: number;\n  duration: number;\n  label: string;\n  audioDuration: number;\n  streamed: boolean;\n  error?: Error;\n}\n\nexport interface TTSMetrics {\n  requestId: string;\n  timestamp: number;\n  ttfb: number;\n  duration: number;\n  label: string;\n  audioDuration: number;\n  cancelled: boolean;\n  charactersCount: number;\n  streamed: boolean;\n  error?: Error;\n}\n\nexport interface VADMetrics {\n  timestamp: number;\n  idleTime: number;\n  inferenceDurationTotal: number;\n  inferenceCount: number;\n  label: string;\n}\n\nexport interface PipelineEOUMetrics {\n  /**\n   * Unique identifier shared across different metrics to combine related STT, LLM, and TTS metrics\n   */\n  sequenceId: string;\n  /** Timestamp of when the event was recorded */\n  timestamp: number;\n  /** Amount of time between the end of speech from VAD and the decision to end the user's turn */\n  endOfUtteranceDelay: number;\n  /**\n   * Time taken to obtain the transcript after the end of the user's speech.\n   *\n   * @remarks\n   * May be 0 if the transcript was already available.\n   */\n  transcriptionDelay: number;\n}\n\nexport interface PipelineLLMMetrics extends LLMMetrics {\n  /**\n   * Unique identifier shared across different metrics to combine related STT, LLM, and TTS metrics\n   */\n  sequenceId: string;\n}\n\nexport interface PipelineTTSMetrics extends TTSMetrics {\n  /**\n   * Unique identifier shared across different metrics to combine related STT, LLM, and TTS metrics\n   */\n  sequenceId: string;\n}\n\nexport type PipelineSTTMetrics = STTMetrics;\nexport type PipelineVADMetrics = VADMetrics;\n\nexport class MultimodalLLMError extends Error {\n  type?: string;\n  reason?: string;\n  code?: string;\n  constructor({\n    type,\n    reason,\n    code,\n    message,\n  }: { type?: string; reason?: string; code?: string; message?: string } = {}) {\n    super(message);\n    this.type = type;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\nexport interface MultimodalLLMMetrics extends LLMMetrics {\n  inputTokenDetails: {\n    cachedTokens: number;\n    textTokens: number;\n    audioTokens: number;\n  };\n  outputTokenDetails: {\n    textTokens: number;\n    audioTokens: number;\n  };\n}\n\nexport type AgentMetrics =\n  | STTMetrics\n  | LLMMetrics\n  | TTSMetrics\n  | VADMetrics\n  | PipelineSTTMetrics\n  | PipelineEOUMetrics\n  | PipelineLLMMetrics\n  | PipelineTTSMetrics\n  | PipelineVADMetrics\n  | MultimodalLLMMetrics;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAoFO,MAAM,2BAA2B,MAAM;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAyE,CAAC,GAAG;AAC3E,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,OAAO;AAAA,EACd;AACF;","names":[]}